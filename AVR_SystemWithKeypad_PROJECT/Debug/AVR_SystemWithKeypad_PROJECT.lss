
AVR_SystemWithKeypad_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00002d96  00002e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080014a  0080014a  00002f14  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b7  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a694  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b24f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <main>
      8a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 eb       	ldi	r26, 0xB0	; 176
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:


u8 ADC_u8BusyState= IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if VOLT_REF == AREF			//AREF, Internal Vref turned off
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif VOLT_REF == AVCC			//AVCC with external capacitor at AREF pin
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

#if BITS_ADJUST == BITS_8			/*ACTIVATE Left Adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif BITS_ADJUST == BITS_10
	CLR_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#error "BITS_ADJUST is not exist"

#endif

	/*Set Prescaler to divide from Div_2 to Div_128*/   //select Div_128 //with Bit masking Not #if
	ADCSRA = ((ADCSRA &= 0b11111000) | ADC_PRESC);
     b78:	26 e2       	ldi	r18, 0x26	; 38
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	a6 e2       	ldi	r26, 0x26	; 38
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e6 e2       	ldi	r30, 0x26	; 38
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 7f       	andi	r24, 0xF8	; 248
     b88:	8c 93       	st	X, r24
     b8a:	8c 91       	ld	r24, X
     b8c:	87 60       	ori	r24, 0x07	; 7
     b8e:	f9 01       	movw	r30, r18
     b90:	80 83       	st	Z, r24

	/*ADC ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24

}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 copy_u8Channel, u8* copy_pu8Reading)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	29 97       	sbiw	r28, 0x09	; 9
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	79 87       	std	Y+9, r23	; 0x09
     bbe:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter=0;
     bc0:	1b 82       	std	Y+3, r1	; 0x03
     bc2:	1c 82       	std	Y+4, r1	; 0x04
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8ErrorState=OK;
     bc8:	1a 82       	std	Y+2, r1	; 0x02

	if(ADC_u8BusyState == IDLE)
     bca:	80 91 53 01 	lds	r24, 0x0153
     bce:	88 23       	and	r24, r24
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <ADC_u8StartConversionSynch+0x2e>
     bd2:	5b c0       	rjmp	.+182    	; 0xc8a <ADC_u8StartConversionSynch+0xe4>
	{
		/*ADC is now BUSY*/
		ADC_u8BusyState= BUSY;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 53 01 	sts	0x0153, r24

		/*Bit_Mask	1: Clear bits in AMUX register
					2: Set the required channel into the MUX bits*/
		ADMUX = ((ADMUX &= 0b11100000) | copy_u8Channel);
     bda:	27 e2       	ldi	r18, 0x27	; 39
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	a7 e2       	ldi	r26, 0x27	; 39
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e2       	ldi	r30, 0x27	; 39
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 7e       	andi	r24, 0xE0	; 224
     bea:	8c 93       	st	X, r24
     bec:	9c 91       	ld	r25, X
     bee:	8f 81       	ldd	r24, Y+7	; 0x07
     bf0:	89 2b       	or	r24, r25
     bf2:	f9 01       	movw	r30, r18
     bf4:	80 83       	st	Z, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <ADC_u8StartConversionSynch+0x76>

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	ad 81       	ldd	r26, Y+5	; 0x05
     c0c:	be 81       	ldd	r27, Y+6	; 0x06
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	a1 1d       	adc	r26, r1
     c12:	b1 1d       	adc	r27, r1
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	ad 83       	std	Y+5, r26	; 0x05
     c1a:	be 83       	std	Y+6, r27	; 0x06

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 95       	swap	r24
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	90 70       	andi	r25, 0x00	; 0
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f4       	brne	.+24     	; 0xc4a <ADC_u8StartConversionSynch+0xa4>
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	ad 81       	ldd	r26, Y+5	; 0x05
     c38:	be 81       	ldd	r27, Y+6	; 0x06
     c3a:	80 35       	cpi	r24, 0x50	; 80
     c3c:	f3 ec       	ldi	r31, 0xC3	; 195
     c3e:	9f 07       	cpc	r25, r31
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	af 07       	cpc	r26, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	bf 07       	cpc	r27, r31
     c48:	f1 f6       	brne	.-68     	; 0xc06 <ADC_u8StartConversionSynch+0x60>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter == ADC_u32TIMEOUT)
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	ad 81       	ldd	r26, Y+5	; 0x05
     c50:	be 81       	ldd	r27, Y+6	; 0x06
     c52:	80 35       	cpi	r24, 0x50	; 80
     c54:	23 ec       	ldi	r18, 0xC3	; 195
     c56:	92 07       	cpc	r25, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	a2 07       	cpc	r26, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	b2 07       	cpc	r27, r18
     c60:	19 f4       	brne	.+6      	; 0xc68 <ADC_u8StartConversionSynch+0xc2>
		{
			/*loop is broken because of timeout is reached*/
			u8 Local_u8ErrorState = NOK;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <ADC_u8StartConversionSynch+0xe8>
		}
		else
		{
			/*loop is broken because flag is raised*/
			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	8c 93       	st	X, r24

			/*Return the reading*/
			*copy_pu8Reading = ADC;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	e8 85       	ldd	r30, Y+8	; 0x08
     c80:	f9 85       	ldd	r31, Y+9	; 0x09
     c82:	80 83       	st	Z, r24

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     c84:	10 92 53 01 	sts	0x0153, r1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <ADC_u8StartConversionSynch+0xe8>
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif*/

	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c90:	29 96       	adiw	r28, 0x09	; 9
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 copy_u8Channel, u8* copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <ADC_u8StartConversionAsynch+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <ADC_u8StartConversionAsynch+0x8>
     caa:	00 d0       	rcall	.+0      	; 0xcac <ADC_u8StartConversionAsynch+0xa>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	7c 83       	std	Y+4, r23	; 0x04
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	5e 83       	std	Y+6, r21	; 0x06
     cb8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
     cba:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
     cbc:	80 91 53 01 	lds	r24, 0x0153
     cc0:	88 23       	and	r24, r24
     cc2:	c9 f5       	brne	.+114    	; 0xd36 <ADC_u8StartConversionAsynch+0x94>
	{
		if((copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	21 f0       	breq	.+8      	; 0xcd4 <ADC_u8StartConversionAsynch+0x32>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f4       	brne	.+6      	; 0xcda <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState = NULL_POINTER;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	30 c0       	rjmp	.+96     	; 0xd3a <ADC_u8StartConversionAsynch+0x98>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 53 01 	sts	0x0153, r24

			/*make ISR source: single channel asynchronous*/
			ADC_u8ISRSource = Single_Channel_Async;
     ce0:	10 92 55 01 	sts	0x0155, r1

			/*Initialize the reading variable globally*/
			ADC_pu8Reading = copy_pu8Reading;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	90 93 4b 01 	sts	0x014B, r25
     cec:	80 93 4a 01 	sts	0x014A, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	90 93 4d 01 	sts	0x014D, r25
     cf8:	80 93 4c 01 	sts	0x014C, r24

			/*Bit_Mask	1: Clear bits in AMUX register
						2: Set the required channel into the MUX bits*/
			ADMUX = ((ADMUX &= 0b11100000)|copy_u8Channel);
     cfc:	27 e2       	ldi	r18, 0x27	; 39
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	a7 e2       	ldi	r26, 0x27	; 39
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e2       	ldi	r30, 0x27	; 39
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 7e       	andi	r24, 0xE0	; 224
     d0c:	8c 93       	st	X, r24
     d0e:	9c 91       	ld	r25, X
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	f9 01       	movw	r30, r18
     d16:	80 83       	st	Z, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d18:	a6 e2       	ldi	r26, 0x26	; 38
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	8c 93       	st	X, r24

			/*ADC interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d26:	a6 e2       	ldi	r26, 0x26	; 38
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e6 e2       	ldi	r30, 0x26	; 38
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 60       	ori	r24, 0x08	; 8
     d32:	8c 93       	st	X, r24
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <ADC_u8StartConversionAsynch+0x98>
		}

	}
	else
	{
		Local_uErrorState = BUSY_FUNC;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uErrorState;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3c:	26 96       	adiw	r28, 0x06	; 6
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain* Copy_Chain)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <ADC_u8StartChainAsynch+0x6>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_uErrorState = OK;
     d5e:	19 82       	std	Y+1, r1	; 0x01

	//Check Null Pointer
	if(Copy_Chain == NULL)
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	19 f4       	brne	.+6      	; 0xd6e <ADC_u8StartChainAsynch+0x20>
	{
		Local_uErrorState = NULL_POINTER;
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	54 c0       	rjmp	.+168    	; 0xe16 <ADC_u8StartChainAsynch+0xc8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
     d6e:	80 91 53 01 	lds	r24, 0x0153
     d72:	88 23       	and	r24, r24
     d74:	09 f0       	breq	.+2      	; 0xd78 <ADC_u8StartChainAsynch+0x2a>
     d76:	4d c0       	rjmp	.+154    	; 0xe12 <ADC_u8StartChainAsynch+0xc4>
		{
			//make ADC busy in order not to work until being idle
			ADC_u8BusyState= BUSY;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 53 01 	sts	0x0153, r24

			/*make ISR source: Chain asynchronous*/
			ADC_u8ISRSource = Chain_Async;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 55 01 	sts	0x0155, r24

			//Initialize the Chain Channel Array globally
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	90 93 4f 01 	sts	0x014F, r25
     d90:	80 93 4e 01 	sts	0x014E, r24

			//Initialize the result array globally
			ADC_pu16ChainResultArr = Copy_Chain->Res;
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	90 93 51 01 	sts	0x0151, r25
     da0:	80 93 50 01 	sts	0x0150, r24

			//Initialize the Chain Size globally
			ADC_u8ChainSize = Copy_Chain->Size;
     da4:	ea 81       	ldd	r30, Y+2	; 0x02
     da6:	fb 81       	ldd	r31, Y+3	; 0x03
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	80 93 54 01 	sts	0x0154, r24

			//Initialize the callback notification function globally
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotoficationFunc;
     dae:	ea 81       	ldd	r30, Y+2	; 0x02
     db0:	fb 81       	ldd	r31, Y+3	; 0x03
     db2:	85 81       	ldd	r24, Z+5	; 0x05
     db4:	96 81       	ldd	r25, Z+6	; 0x06
     db6:	90 93 4d 01 	sts	0x014D, r25
     dba:	80 93 4c 01 	sts	0x014C, r24

			//Initialize current conversation index globally
			ADC_pu8ChainConversationIndex = 0;
     dbe:	10 92 52 01 	sts	0x0152, r1

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (first channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000) | ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     dc2:	47 e2       	ldi	r20, 0x27	; 39
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	a7 e2       	ldi	r26, 0x27	; 39
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e2       	ldi	r30, 0x27	; 39
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	8c 93       	st	X, r24
     dd4:	6c 91       	ld	r22, X
     dd6:	20 91 4e 01 	lds	r18, 0x014E
     dda:	30 91 4f 01 	lds	r19, 0x014F
     dde:	80 91 52 01 	lds	r24, 0x0152
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	e8 0f       	add	r30, r24
     dea:	f9 1f       	adc	r31, r25
     dec:	80 81       	ld	r24, Z
     dee:	86 2b       	or	r24, r22
     df0:	fa 01       	movw	r30, r20
     df2:	80 83       	st	Z, r24

			//Start Conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     df4:	a6 e2       	ldi	r26, 0x26	; 38
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e6 e2       	ldi	r30, 0x26	; 38
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8c 93       	st	X, r24

			//ADC interrupt Enable
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e02:	a6 e2       	ldi	r26, 0x26	; 38
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e6 e2       	ldi	r30, 0x26	; 38
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 60       	ori	r24, 0x08	; 8
     e0e:	8c 93       	st	X, r24
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <ADC_u8StartChainAsynch+0xc8>
		}
		else
		{
			Local_uErrorState = BUSY_FUNC;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_uErrorState;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <__vector_16>:


void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	5f 93       	push	r21
     e36:	6f 93       	push	r22
     e38:	7f 93       	push	r23
     e3a:	8f 93       	push	r24
     e3c:	9f 93       	push	r25
     e3e:	af 93       	push	r26
     e40:	bf 93       	push	r27
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == Single_Channel_Async)
     e4e:	80 91 55 01 	lds	r24, 0x0155
     e52:	88 23       	and	r24, r24
     e54:	c9 f4       	brne	.+50     	; 0xe88 <__vector_16+0x64>
	{
		/*Read ADC result*/
		*ADC_pu8Reading = ADC;
     e56:	a0 91 4a 01 	lds	r26, 0x014A
     e5a:	b0 91 4b 01 	lds	r27, 0x014B
     e5e:	e4 e2       	ldi	r30, 0x24	; 36
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	8d 93       	st	X+, r24
     e68:	9c 93       	st	X, r25

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     e6a:	10 92 53 01 	sts	0x0153, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     e6e:	e0 91 4c 01 	lds	r30, 0x014C
     e72:	f0 91 4d 01 	lds	r31, 0x014D
     e76:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e78:	a6 e2       	ldi	r26, 0x26	; 38
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e2       	ldi	r30, 0x26	; 38
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	8c 93       	st	X, r24
     e86:	53 c0       	rjmp	.+166    	; 0xf2e <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == Chain_Async)
     e88:	80 91 55 01 	lds	r24, 0x0155
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <__vector_16+0x6e>
     e90:	4e c0       	rjmp	.+156    	; 0xf2e <__vector_16+0x10a>
	{
		/*Read ADC result*/
		ADC_pu16ChainResultArr[ADC_pu8ChainConversationIndex] = ADC;
     e92:	20 91 50 01 	lds	r18, 0x0150
     e96:	30 91 51 01 	lds	r19, 0x0151
     e9a:	80 91 52 01 	lds	r24, 0x0152
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	d9 01       	movw	r26, r18
     ea8:	a8 0f       	add	r26, r24
     eaa:	b9 1f       	adc	r27, r25
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24

		/*Increment Index*/
		ADC_pu8ChainConversationIndex++;
     eba:	80 91 52 01 	lds	r24, 0x0152
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 52 01 	sts	0x0152, r24

		/*check chain is finished or not*/
		if(ADC_pu8ChainConversationIndex == ADC_u8ChainSize)
     ec4:	90 91 52 01 	lds	r25, 0x0152
     ec8:	80 91 54 01 	lds	r24, 0x0154
     ecc:	98 17       	cp	r25, r24
     ece:	79 f4       	brne	.+30     	; 0xeee <__vector_16+0xca>
		{
			/*Chain is finished*/

			/*make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
     ed0:	10 92 53 01 	sts	0x0153, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     ed4:	e0 91 4c 01 	lds	r30, 0x014C
     ed8:	f0 91 4d 01 	lds	r31, 0x014D
     edc:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	87 7f       	andi	r24, 0xF7	; 247
     eea:	8c 93       	st	X, r24
     eec:	20 c0       	rjmp	.+64     	; 0xf2e <__vector_16+0x10a>
		{
			/*chain is not finished*/

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (next channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000)|ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     eee:	47 e2       	ldi	r20, 0x27	; 39
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 7e       	andi	r24, 0xE0	; 224
     efe:	8c 93       	st	X, r24
     f00:	6c 91       	ld	r22, X
     f02:	20 91 4e 01 	lds	r18, 0x014E
     f06:	30 91 4f 01 	lds	r19, 0x014F
     f0a:	80 91 52 01 	lds	r24, 0x0152
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	80 81       	ld	r24, Z
     f1a:	86 2b       	or	r24, r22
     f1c:	fa 01       	movw	r30, r20
     f1e:	80 83       	st	Z, r24

			/*Start new Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f20:	a6 e2       	ldi	r26, 0x26	; 38
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e2       	ldi	r30, 0x26	; 38
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24
		}
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <mapping>:

s32 mapping (s32 Input_min, s32 Input_max, s32 Output_min, s32 Output_max, s32 Input_Val)
{
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	60 97       	sbiw	r28, 0x10	; 16
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	69 83       	std	Y+1, r22	; 0x01
     f7a:	7a 83       	std	Y+2, r23	; 0x02
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	2d 83       	std	Y+5, r18	; 0x05
     f82:	3e 83       	std	Y+6, r19	; 0x06
     f84:	4f 83       	std	Y+7, r20	; 0x07
     f86:	58 87       	std	Y+8, r21	; 0x08
     f88:	e9 86       	std	Y+9, r14	; 0x09
     f8a:	fa 86       	std	Y+10, r15	; 0x0a
     f8c:	0b 87       	std	Y+11, r16	; 0x0b
     f8e:	1c 87       	std	Y+12, r17	; 0x0c
     f90:	ad 86       	std	Y+13, r10	; 0x0d
     f92:	be 86       	std	Y+14, r11	; 0x0e
     f94:	cf 86       	std	Y+15, r12	; 0x0f
     f96:	d8 8a       	std	Y+16, r13	; 0x10
	return  ((((Output_max - Output_min)*(Input_Val-Input_min))/(Input_max-Input_min))+Output_min);
     f98:	2d 85       	ldd	r18, Y+13	; 0x0d
     f9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f9c:	4f 85       	ldd	r20, Y+15	; 0x0f
     f9e:	58 89       	ldd	r21, Y+16	; 0x10
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	ab 85       	ldd	r26, Y+11	; 0x0b
     fa6:	bc 85       	ldd	r27, Y+12	; 0x0c
     fa8:	79 01       	movw	r14, r18
     faa:	8a 01       	movw	r16, r20
     fac:	e8 1a       	sub	r14, r24
     fae:	f9 0a       	sbc	r15, r25
     fb0:	0a 0b       	sbc	r16, r26
     fb2:	1b 0b       	sbc	r17, r27
     fb4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fb6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fb8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fba:	58 a1       	ldd	r21, Y+32	; 0x20
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	ab 81       	ldd	r26, Y+3	; 0x03
     fc2:	bc 81       	ldd	r27, Y+4	; 0x04
     fc4:	28 1b       	sub	r18, r24
     fc6:	39 0b       	sbc	r19, r25
     fc8:	4a 0b       	sbc	r20, r26
     fca:	5b 0b       	sbc	r21, r27
     fcc:	c8 01       	movw	r24, r16
     fce:	b7 01       	movw	r22, r14
     fd0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__mulsi3>
     fd4:	7b 01       	movw	r14, r22
     fd6:	8c 01       	movw	r16, r24
     fd8:	2d 81       	ldd	r18, Y+5	; 0x05
     fda:	3e 81       	ldd	r19, Y+6	; 0x06
     fdc:	4f 81       	ldd	r20, Y+7	; 0x07
     fde:	58 85       	ldd	r21, Y+8	; 0x08
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	ab 81       	ldd	r26, Y+3	; 0x03
     fe6:	bc 81       	ldd	r27, Y+4	; 0x04
     fe8:	28 1b       	sub	r18, r24
     fea:	39 0b       	sbc	r19, r25
     fec:	4a 0b       	sbc	r20, r26
     fee:	5b 0b       	sbc	r21, r27
     ff0:	c8 01       	movw	r24, r16
     ff2:	b7 01       	movw	r22, r14
     ff4:	0e 94 77 16 	call	0x2cee	; 0x2cee <__divmodsi4>
     ff8:	da 01       	movw	r26, r20
     ffa:	c9 01       	movw	r24, r18
     ffc:	9c 01       	movw	r18, r24
     ffe:	ad 01       	movw	r20, r26
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	ab 85       	ldd	r26, Y+11	; 0x0b
    1006:	bc 85       	ldd	r27, Y+12	; 0x0c
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	a4 1f       	adc	r26, r20
    100e:	b5 1f       	adc	r27, r21
}
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	60 96       	adiw	r28, 0x10	; 16
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "util/delay.h"

#define F_CPU 8000000

void CLCD_voidInit(void){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	6c 97       	sbiw	r28, 0x1c	; 28
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SetPort_Dir(CLCD_DATA_PORT,DIO_u8_PORT_Output);
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	6f ef       	ldi	r22, 0xFF	; 255
    104e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <DIO_u8_SetPort_Dir>

	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Output);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	65 e0       	ldi	r22, 0x05	; 5
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Output);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	66 e0       	ldi	r22, 0x06	; 6
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Output);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	67 e0       	ldi	r22, 0x07	; 7
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>

	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	67 e0       	ldi	r22, 0x07	; 7
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e2       	ldi	r26, 0x20	; 32
    1080:	b2 e4       	ldi	r27, 0x42	; 66
    1082:	89 8f       	std	Y+25, r24	; 0x19
    1084:	9a 8f       	std	Y+26, r25	; 0x1a
    1086:	ab 8f       	std	Y+27, r26	; 0x1b
    1088:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	69 8d       	ldd	r22, Y+25	; 0x19
    108c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    108e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8d 8b       	std	Y+21, r24	; 0x15
    10a4:	9e 8b       	std	Y+22, r25	; 0x16
    10a6:	af 8b       	std	Y+23, r26	; 0x17
    10a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <CLCD_voidInit+0x96>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 8b       	std	Y+20, r25	; 0x14
    10c8:	8b 8b       	std	Y+19, r24	; 0x13
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <CLCD_voidInit+0x114>
	else if (__tmp > 65535)
    10cc:	6d 89       	ldd	r22, Y+21	; 0x15
    10ce:	7e 89       	ldd	r23, Y+22	; 0x16
    10d0:	8f 89       	ldd	r24, Y+23	; 0x17
    10d2:	98 8d       	ldd	r25, Y+24	; 0x18
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <CLCD_voidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	69 8d       	ldd	r22, Y+25	; 0x19
    10e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
    110c:	0f c0       	rjmp	.+30     	; 0x112c <CLCD_voidInit+0xf6>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a 8b       	std	Y+18, r25	; 0x12
    1114:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1116:	89 89       	ldd	r24, Y+17	; 0x11
    1118:	9a 89       	ldd	r25, Y+18	; 0x12
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidInit+0xe4>
    111e:	9a 8b       	std	Y+18, r25	; 0x12
    1120:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8b 89       	ldd	r24, Y+19	; 0x13
    1124:	9c 89       	ldd	r25, Y+20	; 0x14
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9c 8b       	std	Y+20, r25	; 0x14
    112a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8b 89       	ldd	r24, Y+19	; 0x13
    112e:	9c 89       	ldd	r25, Y+20	; 0x14
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <CLCD_voidInit+0xd8>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <CLCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9c 8b       	std	Y+20, r25	; 0x14
    1148:	8b 8b       	std	Y+19, r24	; 0x13
    114a:	8b 89       	ldd	r24, Y+19	; 0x13
    114c:	9c 89       	ldd	r25, Y+20	; 0x14
    114e:	98 8b       	std	Y+16, r25	; 0x10
    1150:	8f 87       	std	Y+15, r24	; 0x0f
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
    1154:	98 89       	ldd	r25, Y+16	; 0x10
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <CLCD_voidInit+0x120>
    115a:	98 8b       	std	Y+16, r25	; 0x10
    115c:	8f 87       	std	Y+15, r24	; 0x0f

	/*wait for more than 30 msec*/
	_delay_ms(40);

	CLCD_voidSendCommand(lcd_Home);
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_FunctionSet8bit);
    1164:	88 e3       	ldi	r24, 0x38	; 56
    1166:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_DisplayOn);
    116a:	8c e0       	ldi	r24, 0x0C	; 12
    116c:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_Clear);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_EntryMode_Incr);
    1176:	86 e0       	ldi	r24, 0x06	; 6
    1178:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e4       	ldi	r27, 0x40	; 64
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	9c 87       	std	Y+12, r25	; 0x0c
    1188:	ad 87       	std	Y+13, r26	; 0x0d
    118a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a ef       	ldi	r20, 0xFA	; 250
    119a:	54 e4       	ldi	r21, 0x44	; 68
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8f 83       	std	Y+7, r24	; 0x07
    11a6:	98 87       	std	Y+8, r25	; 0x08
    11a8:	a9 87       	std	Y+9, r26	; 0x09
    11aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <CLCD_voidInit+0x198>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <CLCD_voidInit+0x216>
	else if (__tmp > 65535)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <CLCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	0f c0       	rjmp	.+30     	; 0x122e <CLCD_voidInit+0x1f8>
    1210:	88 ec       	ldi	r24, 0xC8	; 200
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <CLCD_voidInit+0x1e6>
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <CLCD_voidInit+0x1da>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <CLCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <CLCD_voidInit+0x222>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1260:	6c 96       	adiw	r28, 0x1c	; 28
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	2f 97       	sbiw	r28, 0x0f	; 15
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS pin to low for command*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Low);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	65 e0       	ldi	r22, 0x05	; 5
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
	/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	66 e0       	ldi	r22, 0x06	; 6
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
	/*Set command to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Command);
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	6f 85       	ldd	r22, Y+15	; 0x0f
    12a0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
	/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	67 e0       	ldi	r22, 0x07	; 7
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	67 e0       	ldi	r22, 0x07	; 7
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a0 e0       	ldi	r26, 0x00	; 0
    12be:	b0 e4       	ldi	r27, 0x40	; 64
    12c0:	8b 87       	std	Y+11, r24	; 0x0b
    12c2:	9c 87       	std	Y+12, r25	; 0x0c
    12c4:	ad 87       	std	Y+13, r26	; 0x0d
    12c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a ef       	ldi	r20, 0xFA	; 250
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8f 83       	std	Y+7, r24	; 0x07
    12e2:	98 87       	std	Y+8, r25	; 0x08
    12e4:	a9 87       	std	Y+9, r26	; 0x09
    12e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <CLCD_voidSendCommand+0x98>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <CLCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	57 e4       	ldi	r21, 0x47	; 71
    131a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	4c f5       	brge	.+82     	; 0x1374 <CLCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e2       	ldi	r20, 0x20	; 32
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	0f c0       	rjmp	.+30     	; 0x136a <CLCD_voidSendCommand+0xf8>
    134c:	88 ec       	ldi	r24, 0xC8	; 200
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <CLCD_voidSendCommand+0xe6>
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	69 f7       	brne	.-38     	; 0x134c <CLCD_voidSendCommand+0xda>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <CLCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <CLCD_voidSendCommand+0x122>
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	67 e0       	ldi	r22, 0x07	; 7
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

}
    13a6:	2f 96       	adiw	r28, 0x0f	; 15
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <CLCD_voidWriteCharctr>:

void CLCD_voidWriteCharctr(u8 Copy_u8Data){
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2f 97       	sbiw	r28, 0x0f	; 15
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_High);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	65 e0       	ldi	r22, 0x05	; 5
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
		/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	66 e0       	ldi	r22, 0x06	; 6
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
		/*Set Data to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Data);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    13e6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
		/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	67 e0       	ldi	r22, 0x07	; 7
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	67 e0       	ldi	r22, 0x07	; 7
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	8b 87       	std	Y+11, r24	; 0x0b
    1408:	9c 87       	std	Y+12, r25	; 0x0c
    140a:	ad 87       	std	Y+13, r26	; 0x0d
    140c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1410:	7c 85       	ldd	r23, Y+12	; 0x0c
    1412:	8d 85       	ldd	r24, Y+13	; 0x0d
    1414:	9e 85       	ldd	r25, Y+14	; 0x0e
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	4a ef       	ldi	r20, 0xFA	; 250
    141c:	54 e4       	ldi	r21, 0x44	; 68
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8f 83       	std	Y+7, r24	; 0x07
    1428:	98 87       	std	Y+8, r25	; 0x08
    142a:	a9 87       	std	Y+9, r26	; 0x09
    142c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	5f e3       	ldi	r21, 0x3F	; 63
    143e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1442:	88 23       	and	r24, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <CLCD_voidWriteCharctr+0x98>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <CLCD_voidWriteCharctr+0x116>
	else if (__tmp > 65535)
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	4c f5       	brge	.+82     	; 0x14ba <CLCD_voidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	6b 85       	ldd	r22, Y+11	; 0x0b
    146a:	7c 85       	ldd	r23, Y+12	; 0x0c
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <CLCD_voidWriteCharctr+0xf8>
    1492:	88 ec       	ldi	r24, 0xC8	; 200
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <CLCD_voidWriteCharctr+0xe6>
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	69 f7       	brne	.-38     	; 0x1492 <CLCD_voidWriteCharctr+0xda>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <CLCD_voidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <CLCD_voidWriteCharctr+0x122>
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	67 e0       	ldi	r22, 0x07	; 7
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
}
    14ec:	2f 96       	adiw	r28, 0x0f	; 15
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <CLCD_voidWriteString>:

void CLCD_voidWriteString (u8* Copy_pcString)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <CLCD_voidWriteString+0x6>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9b 83       	std	Y+3, r25	; 0x03
    150c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	0e c0       	rjmp	.+28     	; 0x152e <CLCD_voidWriteString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	fc 01       	movw	r30, r24
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
		Local_u8Counter++;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidWriteString (u8* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	fc 01       	movw	r30, r24
    153a:	e2 0f       	add	r30, r18
    153c:	f3 1f       	adc	r31, r19
    153e:	80 81       	ld	r24, Z
    1540:	88 23       	and	r24, r24
    1542:	39 f7       	brne	.-50     	; 0x1512 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <CLCD_Gotoxy>:

void CLCD_Gotoxy (u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <CLCD_Gotoxy+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (cpy_u8Xpos==0)
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	88 23       	and	r24, r24
    1564:	19 f4       	brne	.+6      	; 0x156c <CLCD_Gotoxy+0x1c>
	{
		/*location in first line*/
		Local_u8Address=cpy_u8Ypos;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <CLCD_Gotoxy+0x28>
	}
	else if (cpy_u8Xpos==1)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	19 f4       	brne	.+6      	; 0x1578 <CLCD_Gotoxy+0x28>
	{
		/*location in second line*/
		Local_u8Address=cpy_u8Ypos+0x40;
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	80 5c       	subi	r24, 0xC0	; 192
    1576:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set DDRAM Adress 0b10000000=128*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	80 58       	subi	r24, 0x80	; 128
    157c:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <CLCD_voidWriteOneExtraChar>:

//Store and write only one character in specific position//
void CLCD_voidWriteOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	27 97       	sbiw	r28, 0x07	; 7
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	6d 83       	std	Y+5, r22	; 0x05
    15a6:	4e 83       	std	Y+6, r20	; 0x06
    15a8:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    15aa:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 5c       	subi	r24, 0xC0	; 192
    15c4:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <CLCD_voidWriteOneExtraChar+0x5c>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	fc 01       	movw	r30, r24
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	80 81       	ld	r24, Z
    15de:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	89 30       	cpi	r24, 0x09	; 9
    15ec:	78 f3       	brcs	.-34     	; 0x15cc <CLCD_voidWriteOneExtraChar+0x40>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    15ee:	8e 81       	ldd	r24, Y+6	; 0x06
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
}
    15fc:	27 96       	adiw	r28, 0x07	; 7
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <CLCD_voidWriteExtraChar>:

//Store and write many characters//
//ExtraChar_No-> Many characters will be store (one char or 2 or ...8 characters) then written
void CLCD_voidWriteExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_No,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <CLCD_voidWriteExtraChar+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <CLCD_voidWriteExtraChar+0x8>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <CLCD_voidWriteExtraChar+0xa>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9b 83       	std	Y+3, r25	; 0x03
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	6c 83       	std	Y+4, r22	; 0x04
    1622:	4d 83       	std	Y+5, r20	; 0x05
    1624:	2e 83       	std	Y+6, r18	; 0x06
	u8 Local_u8Iterator;

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);
    1626:	80 e4       	ldi	r24, 0x40	; 64
    1628:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	0e c0       	rjmp	.+28     	; 0x164c <CLCD_voidWriteExtraChar+0x3e>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	80 81       	ld	r24, Z
    1642:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	1c f3       	brlt	.-58     	; 0x1630 <CLCD_voidWriteExtraChar+0x22>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	6e 81       	ldd	r22, Y+6	; 0x06
    166e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <CLCD_voidWriteExtraChar+0x74>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	99 81       	ldd	r25, Y+1	; 0x01
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	98 17       	cp	r25, r24
    1688:	b0 f3       	brcs	.-20     	; 0x1676 <CLCD_voidWriteExtraChar+0x68>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
		}
}
    168a:	26 96       	adiw	r28, 0x06	; 6
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <CLCD_voidStoreOneExtraChar>:

//Store only one character without write on screen in specific position//
void CLCD_voidStoreOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <CLCD_voidStoreOneExtraChar+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <CLCD_voidStoreOneExtraChar+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    16b0:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 5c       	subi	r24, 0xC0	; 192
    16ca:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    16ce:	19 82       	std	Y+1, r1	; 0x01
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <CLCD_voidStoreOneExtraChar+0x52>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	fc 01       	movw	r30, r24
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	80 81       	ld	r24, Z
    16e4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	89 30       	cpi	r24, 0x09	; 9
    16f2:	78 f3       	brcs	.-34     	; 0x16d2 <CLCD_voidStoreOneExtraChar+0x36>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(0,0);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	//CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Cpy_Number)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <CLCD_voidWriteNumber+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <CLCD_voidWriteNumber+0x8>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	69 83       	std	Y+1, r22	; 0x01
    171a:	7a 83       	std	Y+2, r23	; 0x02
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	9c 83       	std	Y+4, r25	; 0x04
CLCD_voidWriteCharctr((Cpy_Number/1000)+48);
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02
    1724:	ab 81       	ldd	r26, Y+3	; 0x03
    1726:	bc 81       	ldd	r27, Y+4	; 0x04
    1728:	28 ee       	ldi	r18, 0xE8	; 232
    172a:	33 e0       	ldi	r19, 0x03	; 3
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    1738:	da 01       	movw	r26, r20
    173a:	c9 01       	movw	r24, r18
    173c:	80 5d       	subi	r24, 0xD0	; 208
    173e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%1000)/100)+48);
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	ab 81       	ldd	r26, Y+3	; 0x03
    1748:	bc 81       	ldd	r27, Y+4	; 0x04
    174a:	28 ee       	ldi	r18, 0xE8	; 232
    174c:	33 e0       	ldi	r19, 0x03	; 3
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	24 e6       	ldi	r18, 0x64	; 100
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    176e:	da 01       	movw	r26, r20
    1770:	c9 01       	movw	r24, r18
    1772:	80 5d       	subi	r24, 0xD0	; 208
    1774:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%100)/10)+48);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	ab 81       	ldd	r26, Y+3	; 0x03
    177e:	bc 81       	ldd	r27, Y+4	; 0x04
    1780:	24 e6       	ldi	r18, 0x64	; 100
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    17a4:	da 01       	movw	r26, r20
    17a6:	c9 01       	movw	r24, r18
    17a8:	80 5d       	subi	r24, 0xD0	; 208
    17aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr((Cpy_Number%10)+48);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	ab 81       	ldd	r26, Y+3	; 0x03
    17b4:	bc 81       	ldd	r27, Y+4	; 0x04
    17b6:	2a e0       	ldi	r18, 0x0A	; 10
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	80 5d       	subi	r24, 0xD0	; 208
    17cc:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <CLCD_voidWriteOneNumber>:

void CLCD_voidWriteOneNumber(u8 Cpy_OneNumber)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidWriteCharctr((Cpy_OneNumber%10)+48);
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a e0       	ldi	r25, 0x0A	; 10
    17ee:	69 2f       	mov	r22, r25
    17f0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__udivmodqi4>
    17f4:	89 2f       	mov	r24, r25
    17f6:	80 5d       	subi	r24, 0xD0	; 208
    17f8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <CLCD_voidWriteCharctr>

}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <DIO_u8_SetPin_value+0x6>
    180a:	00 d0       	rcall	.+0      	; 0x180c <DIO_u8_SetPin_value+0x8>
    180c:	00 d0       	rcall	.+0      	; 0x180e <DIO_u8_SetPin_value+0xa>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	6a 83       	std	Y+2, r22	; 0x02
    1816:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	08 f0       	brcs	.+2      	; 0x1820 <DIO_u8_SetPin_value+0x1c>
    181e:	e0 c0       	rjmp	.+448    	; 0x19e0 <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	88 23       	and	r24, r24
    1824:	21 f0       	breq	.+8      	; 0x182e <DIO_u8_SetPin_value+0x2a>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	09 f0       	breq	.+2      	; 0x182e <DIO_u8_SetPin_value+0x2a>
    182c:	d7 c0       	rjmp	.+430    	; 0x19dc <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3e 83       	std	Y+6, r19	; 0x06
    1836:	2d 83       	std	Y+5, r18	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <DIO_u8_SetPin_value+0x40>
    1842:	43 c0       	rjmp	.+134    	; 0x18ca <DIO_u8_SetPin_value+0xc6>
    1844:	2d 81       	ldd	r18, Y+5	; 0x05
    1846:	3e 81       	ldd	r19, Y+6	; 0x06
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	2c f4       	brge	.+10     	; 0x1858 <DIO_u8_SetPin_value+0x54>
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	71 f0       	breq	.+28     	; 0x1872 <DIO_u8_SetPin_value+0x6e>
    1856:	bd c0       	rjmp	.+378    	; 0x19d2 <DIO_u8_SetPin_value+0x1ce>
    1858:	2d 81       	ldd	r18, Y+5	; 0x05
    185a:	3e 81       	ldd	r19, Y+6	; 0x06
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <DIO_u8_SetPin_value+0x60>
    1862:	5f c0       	rjmp	.+190    	; 0x1922 <DIO_u8_SetPin_value+0x11e>
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <DIO_u8_SetPin_value+0x6c>
    186e:	85 c0       	rjmp	.+266    	; 0x197a <DIO_u8_SetPin_value+0x176>
    1870:	b0 c0       	rjmp	.+352    	; 0x19d2 <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	a1 f4       	brne	.+40     	; 0x18a0 <DIO_u8_SetPin_value+0x9c>
    1878:	ab e3       	ldi	r26, 0x3B	; 59
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	eb e3       	ldi	r30, 0x3B	; 59
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8_SetPin_value+0x92>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8_SetPin_value+0x8e>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	9b c0       	rjmp	.+310    	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
    18a0:	ab e3       	ldi	r26, 0x3B	; 59
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e3       	ldi	r30, 0x3B	; 59
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_u8_SetPin_value+0xba>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_u8_SetPin_value+0xb6>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	86 c0       	rjmp	.+268    	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	a1 f4       	brne	.+40     	; 0x18f8 <DIO_u8_SetPin_value+0xf4>
    18d0:	a8 e3       	ldi	r26, 0x38	; 56
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8_SetPin_value+0xea>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8_SetPin_value+0xe6>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	6f c0       	rjmp	.+222    	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8_SetPin_value+0x112>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_u8_SetPin_value+0x10e>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	5a c0       	rjmp	.+180    	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <DIO_u8_SetPin_value+0x14c>
    1928:	a5 e3       	ldi	r26, 0x35	; 53
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e5 e3       	ldi	r30, 0x35	; 53
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8_SetPin_value+0x142>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8_SetPin_value+0x13e>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	43 c0       	rjmp	.+134    	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
    1950:	a5 e3       	ldi	r26, 0x35	; 53
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e5 e3       	ldi	r30, 0x35	; 53
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_u8_SetPin_value+0x16a>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_u8_SetPin_value+0x166>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	2e c0       	rjmp	.+92     	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <DIO_u8_SetPin_value+0x1a4>
    1980:	a2 e3       	ldi	r26, 0x32	; 50
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e2 e3       	ldi	r30, 0x32	; 50
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_u8_SetPin_value+0x19a>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_u8_SetPin_value+0x196>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	17 c0       	rjmp	.+46     	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
    19a8:	a2 e3       	ldi	r26, 0x32	; 50
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8_SetPin_value+0x1c2>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8_SetPin_value+0x1be>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
    19d2:	1c 82       	std	Y+4, r1	; 0x04
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
    19dc:	1c 82       	std	Y+4, r1	; 0x04
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
    19e0:	1c 82       	std	Y+4, r1	; 0x04
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
    19e4:	26 96       	adiw	r28, 0x06	; 6
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <DIO_u8_SetPin_Dir>:
u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <DIO_u8_SetPin_Dir+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <DIO_u8_SetPin_Dir+0x8>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DIO_u8_SetPin_Dir+0xa>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	6a 83       	std	Y+2, r22	; 0x02
    1a08:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 30       	cpi	r24, 0x08	; 8
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <DIO_u8_SetPin_Dir+0x1c>
    1a10:	e0 c0       	rjmp	.+448    	; 0x1bd2 <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	88 23       	and	r24, r24
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <DIO_u8_SetPin_Dir+0x2a>
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <DIO_u8_SetPin_Dir+0x2a>
    1a1e:	d7 c0       	rjmp	.+430    	; 0x1bce <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3e 83       	std	Y+6, r19	; 0x06
    1a28:	2d 83       	std	Y+5, r18	; 0x05
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <DIO_u8_SetPin_Dir+0x40>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <DIO_u8_SetPin_Dir+0xc6>
    1a36:	2d 81       	ldd	r18, Y+5	; 0x05
    1a38:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <DIO_u8_SetPin_Dir+0x54>
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <DIO_u8_SetPin_Dir+0x6e>
    1a48:	bd c0       	rjmp	.+378    	; 0x1bc4 <DIO_u8_SetPin_Dir+0x1ce>
    1a4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <DIO_u8_SetPin_Dir+0x60>
    1a54:	5f c0       	rjmp	.+190    	; 0x1b14 <DIO_u8_SetPin_Dir+0x11e>
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <DIO_u8_SetPin_Dir+0x6c>
    1a60:	85 c0       	rjmp	.+266    	; 0x1b6c <DIO_u8_SetPin_Dir+0x176>
    1a62:	b0 c0       	rjmp	.+352    	; 0x1bc4 <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	a1 f4       	brne	.+40     	; 0x1a92 <DIO_u8_SetPin_Dir+0x9c>
    1a6a:	aa e3       	ldi	r26, 0x3A	; 58
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	ea e3       	ldi	r30, 0x3A	; 58
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_u8_SetPin_Dir+0x92>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_u8_SetPin_Dir+0x8e>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	9b c0       	rjmp	.+310    	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
    1a92:	aa e3       	ldi	r26, 0x3A	; 58
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ea e3       	ldi	r30, 0x3A	; 58
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_u8_SetPin_Dir+0xba>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_u8_SetPin_Dir+0xb6>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	86 c0       	rjmp	.+268    	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a1 f4       	brne	.+40     	; 0x1aea <DIO_u8_SetPin_Dir+0xf4>
    1ac2:	a7 e3       	ldi	r26, 0x37	; 55
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e7 e3       	ldi	r30, 0x37	; 55
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_u8_SetPin_Dir+0xea>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_u8_SetPin_Dir+0xe6>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	6f c0       	rjmp	.+222    	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
    1aea:	a7 e3       	ldi	r26, 0x37	; 55
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e7 e3       	ldi	r30, 0x37	; 55
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_u8_SetPin_Dir+0x112>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_u8_SetPin_Dir+0x10e>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	5a c0       	rjmp	.+180    	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	a1 f4       	brne	.+40     	; 0x1b42 <DIO_u8_SetPin_Dir+0x14c>
    1b1a:	a4 e3       	ldi	r26, 0x34	; 52
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e4 e3       	ldi	r30, 0x34	; 52
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_u8_SetPin_Dir+0x142>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_u8_SetPin_Dir+0x13e>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	43 c0       	rjmp	.+134    	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
    1b42:	a4 e3       	ldi	r26, 0x34	; 52
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e4 e3       	ldi	r30, 0x34	; 52
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_u8_SetPin_Dir+0x16a>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_u8_SetPin_Dir+0x166>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	2e c0       	rjmp	.+92     	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	a1 f4       	brne	.+40     	; 0x1b9a <DIO_u8_SetPin_Dir+0x1a4>
    1b72:	a1 e3       	ldi	r26, 0x31	; 49
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e1 e3       	ldi	r30, 0x31	; 49
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_u8_SetPin_Dir+0x19a>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_u8_SetPin_Dir+0x196>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	17 c0       	rjmp	.+46     	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
    1b9a:	a1 e3       	ldi	r26, 0x31	; 49
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e1 e3       	ldi	r30, 0x31	; 49
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_u8_SetPin_Dir+0x1c2>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_u8_SetPin_Dir+0x1be>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
    1bc4:	1c 82       	std	Y+4, r1	; 0x04
    1bc6:	06 c0       	rjmp	.+12     	; 0x1bd4 <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
    1bce:	1c 82       	std	Y+4, r1	; 0x04
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
    1bd2:	1c 82       	std	Y+4, r1	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
    1bd6:	26 96       	adiw	r28, 0x06	; 6
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <DIO_u8_SetPort_value+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <DIO_u8_SetPort_value+0x8>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	3d 83       	std	Y+5, r19	; 0x05
    1c02:	2c 83       	std	Y+4, r18	; 0x04
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	d1 f0       	breq	.+52     	; 0x1c42 <DIO_u8_SetPort_value+0x5a>
    1c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c10:	3d 81       	ldd	r19, Y+5	; 0x05
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <DIO_u8_SetPort_value+0x3a>
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <DIO_u8_SetPort_value+0x50>
    1c20:	1f c0       	rjmp	.+62     	; 0x1c60 <DIO_u8_SetPort_value+0x78>
    1c22:	2c 81       	ldd	r18, Y+4	; 0x04
    1c24:	3d 81       	ldd	r19, Y+5	; 0x05
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <DIO_u8_SetPort_value+0x64>
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	91 05       	cpc	r25, r1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <DIO_u8_SetPort_value+0x6e>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
    1c38:	eb e3       	ldi	r30, 0x3B	; 59
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	11 c0       	rjmp	.+34     	; 0x1c64 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
    1c42:	e8 e3       	ldi	r30, 0x38	; 56
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	0c c0       	rjmp	.+24     	; 0x1c64 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
    1c4c:	e5 e3       	ldi	r30, 0x35	; 53
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
    1c56:	e2 e3       	ldi	r30, 0x32	; 50
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1c60:	1b 82       	std	Y+3, r1	; 0x03
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	9b 83       	std	Y+3, r25	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <DIO_u8_SetPort_Dir+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <DIO_u8_SetPort_Dir+0x8>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3d 83       	std	Y+5, r19	; 0x05
    1c94:	2c 83       	std	Y+4, r18	; 0x04
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	d1 f0       	breq	.+52     	; 0x1cd4 <DIO_u8_SetPort_Dir+0x5a>
    1ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <DIO_u8_SetPort_Dir+0x3a>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	61 f0       	breq	.+24     	; 0x1cca <DIO_u8_SetPort_Dir+0x50>
    1cb2:	1f c0       	rjmp	.+62     	; 0x1cf2 <DIO_u8_SetPort_Dir+0x78>
    1cb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	81 f0       	breq	.+32     	; 0x1cde <DIO_u8_SetPort_Dir+0x64>
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc2:	83 30       	cpi	r24, 0x03	; 3
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	81 f0       	breq	.+32     	; 0x1ce8 <DIO_u8_SetPort_Dir+0x6e>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	80 83       	st	Z, r24
    1cd2:	11 c0       	rjmp	.+34     	; 0x1cf6 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
    1cd4:	e7 e3       	ldi	r30, 0x37	; 55
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	80 83       	st	Z, r24
    1cdc:	0c c0       	rjmp	.+24     	; 0x1cf6 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
    1cde:	e4 e3       	ldi	r30, 0x34	; 52
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	80 83       	st	Z, r24
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
    1ce8:	e1 e3       	ldi	r30, 0x31	; 49
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 83       	st	Z, r24
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1cf2:	1b 82       	std	Y+3, r1	; 0x03
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	9b 83       	std	Y+3, r25	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	27 97       	sbiw	r28, 0x07	; 7
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	6a 83       	std	Y+2, r22	; 0x02
    1d24:	5c 83       	std	Y+4, r21	; 0x04
    1d26:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3f 83       	std	Y+7, r19	; 0x07
    1d30:	2e 83       	std	Y+6, r18	; 0x06
    1d32:	4e 81       	ldd	r20, Y+6	; 0x06
    1d34:	5f 81       	ldd	r21, Y+7	; 0x07
    1d36:	41 30       	cpi	r20, 0x01	; 1
    1d38:	51 05       	cpc	r21, r1
    1d3a:	59 f1       	breq	.+86     	; 0x1d92 <DIO_u8_GetPin_value+0x86>
    1d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	91 05       	cpc	r25, r1
    1d44:	34 f4       	brge	.+12     	; 0x1d52 <DIO_u8_GetPin_value+0x46>
    1d46:	2e 81       	ldd	r18, Y+6	; 0x06
    1d48:	3f 81       	ldd	r19, Y+7	; 0x07
    1d4a:	21 15       	cp	r18, r1
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	69 f0       	breq	.+26     	; 0x1d6a <DIO_u8_GetPin_value+0x5e>
    1d50:	5c c0       	rjmp	.+184    	; 0x1e0a <DIO_u8_GetPin_value+0xfe>
    1d52:	4e 81       	ldd	r20, Y+6	; 0x06
    1d54:	5f 81       	ldd	r21, Y+7	; 0x07
    1d56:	42 30       	cpi	r20, 0x02	; 2
    1d58:	51 05       	cpc	r21, r1
    1d5a:	79 f1       	breq	.+94     	; 0x1dba <DIO_u8_GetPin_value+0xae>
    1d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d60:	83 30       	cpi	r24, 0x03	; 3
    1d62:	91 05       	cpc	r25, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <DIO_u8_GetPin_value+0x5c>
    1d66:	3d c0       	rjmp	.+122    	; 0x1de2 <DIO_u8_GetPin_value+0xd6>
    1d68:	50 c0       	rjmp	.+160    	; 0x1e0a <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
    1d6a:	e9 e3       	ldi	r30, 0x39	; 57
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a9 01       	movw	r20, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_u8_GetPin_value+0x76>
    1d7e:	55 95       	asr	r21
    1d80:	47 95       	ror	r20
    1d82:	8a 95       	dec	r24
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_u8_GetPin_value+0x72>
    1d86:	ca 01       	movw	r24, r20
    1d88:	81 70       	andi	r24, 0x01	; 1
    1d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8e:	80 83       	st	Z, r24
    1d90:	3e c0       	rjmp	.+124    	; 0x1e0e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
    1d92:	e6 e3       	ldi	r30, 0x36	; 54
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a9 01       	movw	r20, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_u8_GetPin_value+0x9e>
    1da6:	55 95       	asr	r21
    1da8:	47 95       	ror	r20
    1daa:	8a 95       	dec	r24
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_u8_GetPin_value+0x9a>
    1dae:	ca 01       	movw	r24, r20
    1db0:	81 70       	andi	r24, 0x01	; 1
    1db2:	eb 81       	ldd	r30, Y+3	; 0x03
    1db4:	fc 81       	ldd	r31, Y+4	; 0x04
    1db6:	80 83       	st	Z, r24
    1db8:	2a c0       	rjmp	.+84     	; 0x1e0e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
    1dba:	e3 e3       	ldi	r30, 0x33	; 51
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	88 2f       	mov	r24, r24
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a9 01       	movw	r20, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_u8_GetPin_value+0xc6>
    1dce:	55 95       	asr	r21
    1dd0:	47 95       	ror	r20
    1dd2:	8a 95       	dec	r24
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_u8_GetPin_value+0xc2>
    1dd6:	ca 01       	movw	r24, r20
    1dd8:	81 70       	andi	r24, 0x01	; 1
    1dda:	eb 81       	ldd	r30, Y+3	; 0x03
    1ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dde:	80 83       	st	Z, r24
    1de0:	16 c0       	rjmp	.+44     	; 0x1e0e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
    1de2:	e0 e3       	ldi	r30, 0x30	; 48
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_u8_GetPin_value+0xee>
    1df6:	55 95       	asr	r21
    1df8:	47 95       	ror	r20
    1dfa:	8a 95       	dec	r24
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <DIO_u8_GetPin_value+0xea>
    1dfe:	ca 01       	movw	r24, r20
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	eb 81       	ldd	r30, Y+3	; 0x03
    1e04:	fc 81       	ldd	r31, Y+4	; 0x04
    1e06:	80 83       	st	Z, r24
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
    1e0a:	1d 82       	std	Y+5, r1	; 0x05
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
    1e0e:	51 e0       	ldi	r21, 0x01	; 1
    1e10:	5d 83       	std	Y+5, r21	; 0x05
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e14:	27 96       	adiw	r28, 0x07	; 7
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <DIO_u8_GetPort_value+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <DIO_u8_GetPort_value+0x8>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_u8_GetPort_value+0xa>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	7b 83       	std	Y+3, r23	; 0x03
    1e38:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3e 83       	std	Y+6, r19	; 0x06
    1e42:	2d 83       	std	Y+5, r18	; 0x05
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	e1 f0       	breq	.+56     	; 0x1e86 <DIO_u8_GetPort_value+0x60>
    1e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e50:	3e 81       	ldd	r19, Y+6	; 0x06
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <DIO_u8_GetPort_value+0x3c>
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <DIO_u8_GetPort_value+0x52>
    1e60:	27 c0       	rjmp	.+78     	; 0x1eb0 <DIO_u8_GetPort_value+0x8a>
    1e62:	2d 81       	ldd	r18, Y+5	; 0x05
    1e64:	3e 81       	ldd	r19, Y+6	; 0x06
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	a1 f0       	breq	.+40     	; 0x1e94 <DIO_u8_GetPort_value+0x6e>
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	91 05       	cpc	r25, r1
    1e74:	b1 f0       	breq	.+44     	; 0x1ea2 <DIO_u8_GetPort_value+0x7c>
    1e76:	1c c0       	rjmp	.+56     	; 0x1eb0 <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
    1e78:	eb e3       	ldi	r30, 0x3B	; 59
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e80:	fb 81       	ldd	r31, Y+3	; 0x03
    1e82:	80 83       	st	Z, r24
    1e84:	17 c0       	rjmp	.+46     	; 0x1eb4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
    1e86:	e8 e3       	ldi	r30, 0x38	; 56
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e90:	80 83       	st	Z, r24
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
    1e94:	e5 e3       	ldi	r30, 0x35	; 53
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9e:	80 83       	st	Z, r24
    1ea0:	09 c0       	rjmp	.+18     	; 0x1eb4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
    1ea2:	e2 e3       	ldi	r30, 0x32	; 50
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eaa:	fb 81       	ldd	r31, Y+3	; 0x03
    1eac:	80 83       	st	Z, r24
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
    1eb0:	1c 82       	std	Y+4, r1	; 0x04
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1eba:	26 96       	adiw	r28, 0x06	; 6
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <GIE_voidEnable>:
#include"BIT_CALC.h"
#include"GIE_Private.h"
#include"GIE_Interface.h"

void GIE_voidEnable(void)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1ed4:	af e5       	ldi	r26, 0x5F	; 95
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	ef e5       	ldi	r30, 0x5F	; 95
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	8c 93       	st	X, r24
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1ef0:	af e5       	ldi	r26, 0x5F	; 95
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	ef e5       	ldi	r30, 0x5F	; 95
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 77       	andi	r24, 0x7F	; 127
    1efc:	8c 93       	st	X, r24
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <KPD_Void_Init>:

u8 Col_index;
u8 Row_index;


void KPD_Void_Init(void){
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62

#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB; Col_index++)
    1f0c:	10 92 57 01 	sts	0x0157, r1
    1f10:	45 c0       	rjmp	.+138    	; 0x1f9c <KPD_Void_Init+0x98>
	{
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Output);
    1f12:	80 91 57 01 	lds	r24, 0x0157
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e8 54       	subi	r30, 0x48	; 72
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	90 81       	ld	r25, Z
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	69 2f       	mov	r22, r25
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
    1f2c:	80 91 57 01 	lds	r24, 0x0157
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	fc 01       	movw	r30, r24
    1f36:	e8 54       	subi	r30, 0x48	; 72
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	90 81       	ld	r25, Z
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	69 2f       	mov	r22, r25
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1f46:	10 92 56 01 	sts	0x0156, r1
    1f4a:	1f c0       	rjmp	.+62     	; 0x1f8a <KPD_Void_Init+0x86>

			DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Row_PINS[Row_index], DIO_u8_Input);
    1f4c:	80 91 56 01 	lds	r24, 0x0156
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	e4 54       	subi	r30, 0x44	; 68
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	90 81       	ld	r25, Z
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	69 2f       	mov	r22, r25
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
			DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], DIO_u8_High);
    1f66:	80 91 56 01 	lds	r24, 0x0156
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e4 54       	subi	r30, 0x44	; 68
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	90 81       	ld	r25, Z
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	69 2f       	mov	r22, r25
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Output);
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1f80:	80 91 56 01 	lds	r24, 0x0156
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	80 93 56 01 	sts	0x0156, r24
    1f8a:	80 91 56 01 	lds	r24, 0x0156
    1f8e:	84 30       	cpi	r24, 0x04	; 4
    1f90:	e8 f2       	brcs	.-70     	; 0x1f4c <KPD_Void_Init+0x48>

void KPD_Void_Init(void){

#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB; Col_index++)
    1f92:	80 91 57 01 	lds	r24, 0x0157
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 93 57 01 	sts	0x0157, r24
    1f9c:	80 91 57 01 	lds	r24, 0x0157
    1fa0:	84 30       	cpi	r24, 0x04	; 4
    1fa2:	08 f4       	brcc	.+2      	; 0x1fa6 <KPD_Void_Init+0xa2>
    1fa4:	b6 cf       	rjmp	.-148    	; 0x1f12 <KPD_Void_Init+0xe>
#endif

	}
#endif

}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <KPD_voidGet_KPD_Status>:
u8 KPD_voidGet_KPD_Status(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	6a 97       	sbiw	r28, 0x1a	; 26
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Pressed_Key = KPD_No_Pressed_Key, Col_index, Row_index, Local_u8Pin_State;
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8KPD_Arr[KPD_u8_Row_NB][KPD_u8_Col_NB] = KPD_Arr_VAL;
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	05 96       	adiw	r24, 0x05	; 5
    1fc8:	9f 8b       	std	Y+23, r25	; 0x17
    1fca:	8e 8b       	std	Y+22, r24	; 0x16
    1fcc:	e0 ec       	ldi	r30, 0xC0	; 192
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	f9 8f       	std	Y+25, r31	; 0x19
    1fd2:	e8 8f       	std	Y+24, r30	; 0x18
    1fd4:	f0 e1       	ldi	r31, 0x10	; 16
    1fd6:	fa 8f       	std	Y+26, r31	; 0x1a
    1fd8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1fda:	f9 8d       	ldd	r31, Y+25	; 0x19
    1fdc:	00 80       	ld	r0, Z
    1fde:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe0:	99 8d       	ldd	r25, Y+25	; 0x19
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	99 8f       	std	Y+25, r25	; 0x19
    1fe6:	88 8f       	std	Y+24, r24	; 0x18
    1fe8:	ee 89       	ldd	r30, Y+22	; 0x16
    1fea:	ff 89       	ldd	r31, Y+23	; 0x17
    1fec:	00 82       	st	Z, r0
    1fee:	8e 89       	ldd	r24, Y+22	; 0x16
    1ff0:	9f 89       	ldd	r25, Y+23	; 0x17
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9f 8b       	std	Y+23, r25	; 0x17
    1ff6:	8e 8b       	std	Y+22, r24	; 0x16
    1ff8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ffa:	91 50       	subi	r25, 0x01	; 1
    1ffc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2000:	ee 23       	and	r30, r30
    2002:	51 f7       	brne	.-44     	; 0x1fd8 <KPD_voidGet_KPD_Status+0x2c>


#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB;Col_index++)
    2004:	1a 82       	std	Y+2, r1	; 0x02
    2006:	60 c0       	rjmp	.+192    	; 0x20c8 <KPD_voidGet_KPD_Status+0x11c>
	{
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		//Activate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Low);
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	e8 54       	subi	r30, 0x48	; 72
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	90 81       	ld	r25, Z
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	69 2f       	mov	r22, r25
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++)
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <KPD_voidGet_KPD_Status+0xf6>
		{
			//Read the current Row
			DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	fc 01       	movw	r30, r24
    202c:	e4 54       	subi	r30, 0x44	; 68
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	90 81       	ld	r25, Z
    2032:	9e 01       	movw	r18, r28
    2034:	2c 5f       	subi	r18, 0xFC	; 252
    2036:	3f 4f       	sbci	r19, 0xFF	; 255
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	69 2f       	mov	r22, r25
    203c:	a9 01       	movw	r20, r18
    203e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <DIO_u8_GetPin_value>

			//check if switch is pressed
			if(DIO_u8_Low == Local_u8Pin_State)
    2042:	8c 81       	ldd	r24, Y+4	; 0x04
    2044:	88 23       	and	r24, r24
    2046:	51 f5       	brne	.+84     	; 0x209c <KPD_voidGet_KPD_Status+0xf0>
			{
				Local_u8Pressed_Key = Local_u8KPD_Arr[Row_index][Col_index];
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	48 2f       	mov	r20, r24
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	82 0f       	add	r24, r18
    2062:	93 1f       	adc	r25, r19
    2064:	84 0f       	add	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	fc 01       	movw	r30, r24
    206a:	34 96       	adiw	r30, 0x04	; 4
    206c:	80 81       	ld	r24, Z
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <KPD_voidGet_KPD_Status+0xe4>

				//Polling ( busy waiting ) until the key is released

				while(DIO_u8_Low == Local_u8Pin_State)
				{
					DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	fc 01       	movw	r30, r24
    207a:	e4 54       	subi	r30, 0x44	; 68
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	90 81       	ld	r25, Z
    2080:	9e 01       	movw	r18, r28
    2082:	2c 5f       	subi	r18, 0xFC	; 252
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	69 2f       	mov	r22, r25
    208a:	a9 01       	movw	r20, r18
    208c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <DIO_u8_GetPin_value>
			{
				Local_u8Pressed_Key = Local_u8KPD_Arr[Row_index][Col_index];

				//Polling ( busy waiting ) until the key is released

				while(DIO_u8_Low == Local_u8Pin_State)
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	88 23       	and	r24, r24
    2094:	71 f3       	breq	.-36     	; 0x2072 <KPD_voidGet_KPD_Status+0xc6>
				{
					DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
				}
				return Local_u8Pressed_Key;
    2096:	fb 81       	ldd	r31, Y+3	; 0x03
    2098:	fd 8b       	std	Y+21, r31	; 0x15
    209a:	1c c0       	rjmp	.+56     	; 0x20d4 <KPD_voidGet_KPD_Status+0x128>
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		//Activate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Low);

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	08 f4       	brcc	.+2      	; 0x20aa <KPD_voidGet_KPD_Status+0xfe>
    20a8:	bd cf       	rjmp	.-134    	; 0x2024 <KPD_voidGet_KPD_Status+0x78>
				}
				return Local_u8Pressed_Key;
			}
		}
		//DeActivate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	e8 54       	subi	r30, 0x48	; 72
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	90 81       	ld	r25, Z
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	69 2f       	mov	r22, r25
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
	u8 Local_u8KPD_Arr[KPD_u8_Row_NB][KPD_u8_Col_NB] = KPD_Arr_VAL;


#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB;Col_index++)
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	8f 5f       	subi	r24, 0xFF	; 255
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	08 f4       	brcc	.+2      	; 0x20d0 <KPD_voidGet_KPD_Status+0x124>
    20ce:	9c cf       	rjmp	.-200    	; 0x2008 <KPD_voidGet_KPD_Status+0x5c>
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
#endif
	}
#endif

	return Local_u8Pressed_Key;
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	8d 8b       	std	Y+21, r24	; 0x15
    20d4:	8d 89       	ldd	r24, Y+21	; 0x15
}
    20d6:	6a 96       	adiw	r28, 0x1a	; 26
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Segment7_VoidInit>:
#include "DIO_interface.h"
#include "SEGMENT7_interface.h"
#include "SEGMENT7_config.h"

void Segment7_VoidInit(void)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPort_Dir(u8Port7Seg, DIO_u8_PORT_Output);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	6f ef       	ldi	r22, 0xFF	; 255
    20f4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <DIO_u8_SetPort_Dir>
	DIO_u8_SetPin_Dir(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Output);
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	63 e0       	ldi	r22, 0x03	; 3
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Output);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	63 e0       	ldi	r22, 0x03	; 3
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	Segment7_VidClearDisplay();
    210c:	0e 94 9d 10 	call	0x213a	; 0x213a <Segment7_VidClearDisplay>
	Segment7_VidEnableDisplayOne();
    2110:	0e 94 a8 10 	call	0x2150	; 0x2150 <Segment7_VidEnableDisplayOne>
	Segment7_VidEnableDisplayOne();
    2114:	0e 94 a8 10 	call	0x2150	; 0x2150 <Segment7_VidEnableDisplayOne>
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <Segment7_VidSetDisplay>:

void Segment7_VidSetDisplay(u8 u8ArrCopy)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
	{
	case ComAnode:
		DIO_u8_SetPort_value(u8Port7Seg, ~(u8ArrCopy));
	break;
	case ComCathode:
		DIO_u8_SetPort_value(u8Port7Seg, u8ArrCopy);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	69 81       	ldd	r22, Y+1	; 0x01
    212e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
	break;
	}
}
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <Segment7_VidClearDisplay>:

void Segment7_VidClearDisplay(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
	{
	case ComAnode:
		DIO_u8_SetPort_value(u8Port7Seg, DIO_u8_High);
	break;
	case ComCathode:
		DIO_u8_SetPort_value(u8Port7Seg, DIO_u8_Low);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
	break;
	}
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <Segment7_VidEnableDisplayOne>:

 void Segment7_VidEnableDisplayOne(void){
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
		{
		case ComAnode:
			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_High);
			break;
		case ComCathode:
			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Low);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
			break;
		}
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <Segment7_VidEnableDisplayTwo>:

 void Segment7_VidEnableDisplayTwo(void){
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
 		{
 		case ComAnode:
 			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_High);
 			break;
 		case ComCathode:
 			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Low);
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	63 e0       	ldi	r22, 0x03	; 3
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
 			break;
 		}
 }
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <Segment7_VidDisableDisplayOne>:

 void Segment7_VidDisableDisplayOne(void){
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
			{
			case ComAnode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Low);
				break;
			case ComCathode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_High);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	63 e0       	ldi	r22, 0x03	; 3
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
				break;
			}
}
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <Segment7_VidDisableDisplayTwo>:

 void Segment7_VidDisableDisplayTwo(void){
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
			{
			case ComAnode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Low);
				break;
			case ComCathode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_High);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	63 e0       	ldi	r22, 0x03	; 3
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
				break;
			}
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <main>:
void ADCTempNotification (void);
void ADCLDRNotification (void);


void main (void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	c0 56       	subi	r28, 0x60	; 96
    21ba:	d0 40       	sbci	r29, 0x00	; 0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
	//Local variable to Store data from keypad when pressed any key
	u8 Local_u8Key;

	//local Array to Store ID to compare passord
	u8 Local_u8ArrID[4],IteratorID=0,i;
    21c6:	fe 01       	movw	r30, r28
    21c8:	e8 5b       	subi	r30, 0xB8	; 184
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	10 82       	st	Z, r1

	//local Array to Store Pass to compare with ID if It write or wrong
	u8 Local_u8ArrPass[4],IteratorPass=0;
    21ce:	fe 01       	movw	r30, r28
    21d0:	ea 5b       	subi	r30, 0xBA	; 186
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	10 82       	st	Z, r1

	u32 Local_u8Pass=0,j=1000;
    21d6:	fe 01       	movw	r30, r28
    21d8:	ee 5b       	subi	r30, 0xBE	; 190
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	10 82       	st	Z, r1
    21de:	11 82       	std	Z+1, r1	; 0x01
    21e0:	12 82       	std	Z+2, r1	; 0x02
    21e2:	13 82       	std	Z+3, r1	; 0x03
    21e4:	fe 01       	movw	r30, r28
    21e6:	fe 96       	adiw	r30, 0x3e	; 62
    21e8:	88 ee       	ldi	r24, 0xE8	; 232
    21ea:	93 e0       	ldi	r25, 0x03	; 3
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	80 83       	st	Z, r24
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	a2 83       	std	Z+2, r26	; 0x02
    21f6:	b3 83       	std	Z+3, r27	; 0x03
	u32 Local_u8UserPass=0;
    21f8:	1a ae       	std	Y+58, r1	; 0x3a
    21fa:	1b ae       	std	Y+59, r1	; 0x3b
    21fc:	1c ae       	std	Y+60, r1	; 0x3c
    21fe:	1d ae       	std	Y+61, r1	; 0x3d

	//Local Variable make 3 tries only to Enter password
	u8 Local_u8Wrong_pass=3;
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	89 af       	std	Y+57, r24	; 0x39

	KPD_Void_Init();
    2204:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <KPD_Void_Init>
	CLCD_voidInit();
    2208:	0e 94 1b 08 	call	0x1036	; 0x1036 <CLCD_voidInit>
	Segment7_VoidInit();
    220c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Segment7_VoidInit>

	//7Segment Array to display Numbers*
	u8 NUMBERS [10] = {zero, one, two, three, four, five, six, seven, eight, nine};
    2210:	ce 01       	movw	r24, r28
    2212:	8e 5a       	subi	r24, 0xAE	; 174
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	6e 96       	adiw	r28, 0x1e	; 30
    2218:	9f af       	std	Y+63, r25	; 0x3f
    221a:	8e af       	std	Y+62, r24	; 0x3e
    221c:	6e 97       	sbiw	r28, 0x1e	; 30
    221e:	80 e4       	ldi	r24, 0x40	; 64
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	a0 96       	adiw	r28, 0x20	; 32
    2224:	9f af       	std	Y+63, r25	; 0x3f
    2226:	8e af       	std	Y+62, r24	; 0x3e
    2228:	a0 97       	sbiw	r28, 0x20	; 32
    222a:	9a e0       	ldi	r25, 0x0A	; 10
    222c:	a1 96       	adiw	r28, 0x21	; 33
    222e:	9f af       	std	Y+63, r25	; 0x3f
    2230:	a1 97       	sbiw	r28, 0x21	; 33
    2232:	a0 96       	adiw	r28, 0x20	; 32
    2234:	ee ad       	ldd	r30, Y+62	; 0x3e
    2236:	ff ad       	ldd	r31, Y+63	; 0x3f
    2238:	a0 97       	sbiw	r28, 0x20	; 32
    223a:	00 80       	ld	r0, Z
    223c:	a0 96       	adiw	r28, 0x20	; 32
    223e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2240:	9f ad       	ldd	r25, Y+63	; 0x3f
    2242:	a0 97       	sbiw	r28, 0x20	; 32
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	a0 96       	adiw	r28, 0x20	; 32
    2248:	9f af       	std	Y+63, r25	; 0x3f
    224a:	8e af       	std	Y+62, r24	; 0x3e
    224c:	a0 97       	sbiw	r28, 0x20	; 32
    224e:	6e 96       	adiw	r28, 0x1e	; 30
    2250:	ee ad       	ldd	r30, Y+62	; 0x3e
    2252:	ff ad       	ldd	r31, Y+63	; 0x3f
    2254:	6e 97       	sbiw	r28, 0x1e	; 30
    2256:	00 82       	st	Z, r0
    2258:	6e 96       	adiw	r28, 0x1e	; 30
    225a:	8e ad       	ldd	r24, Y+62	; 0x3e
    225c:	9f ad       	ldd	r25, Y+63	; 0x3f
    225e:	6e 97       	sbiw	r28, 0x1e	; 30
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	6e 96       	adiw	r28, 0x1e	; 30
    2264:	9f af       	std	Y+63, r25	; 0x3f
    2266:	8e af       	std	Y+62, r24	; 0x3e
    2268:	6e 97       	sbiw	r28, 0x1e	; 30
    226a:	a1 96       	adiw	r28, 0x21	; 33
    226c:	9f ad       	ldd	r25, Y+63	; 0x3f
    226e:	a1 97       	sbiw	r28, 0x21	; 33
    2270:	91 50       	subi	r25, 0x01	; 1
    2272:	a1 96       	adiw	r28, 0x21	; 33
    2274:	9f af       	std	Y+63, r25	; 0x3f
    2276:	a1 97       	sbiw	r28, 0x21	; 33
    2278:	a1 96       	adiw	r28, 0x21	; 33
    227a:	ef ad       	ldd	r30, Y+63	; 0x3f
    227c:	a1 97       	sbiw	r28, 0x21	; 33
    227e:	ee 23       	and	r30, r30
    2280:	c1 f6       	brne	.-80     	; 0x2232 <main+0x82>

	//First display on screen welocm for 3 seconds
	CLCD_voidWriteString("WELCOME");
    2282:	80 e6       	ldi	r24, 0x60	; 96
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	af ea       	ldi	r26, 0xAF	; 175
    2290:	b3 e4       	ldi	r27, 0x43	; 67
    2292:	8d ab       	std	Y+53, r24	; 0x35
    2294:	9e ab       	std	Y+54, r25	; 0x36
    2296:	af ab       	std	Y+55, r26	; 0x37
    2298:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6d a9       	ldd	r22, Y+53	; 0x35
    229c:	7e a9       	ldd	r23, Y+54	; 0x36
    229e:	8f a9       	ldd	r24, Y+55	; 0x37
    22a0:	98 ad       	ldd	r25, Y+56	; 0x38
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	89 ab       	std	Y+49, r24	; 0x31
    22b4:	9a ab       	std	Y+50, r25	; 0x32
    22b6:	ab ab       	std	Y+51, r26	; 0x33
    22b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ba:	69 a9       	ldd	r22, Y+49	; 0x31
    22bc:	7a a9       	ldd	r23, Y+50	; 0x32
    22be:	8b a9       	ldd	r24, Y+51	; 0x33
    22c0:	9c a9       	ldd	r25, Y+52	; 0x34
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <main+0x12c>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	98 ab       	std	Y+48, r25	; 0x30
    22d8:	8f a7       	std	Y+47, r24	; 0x2f
    22da:	3f c0       	rjmp	.+126    	; 0x235a <main+0x1aa>
	else if (__tmp > 65535)
    22dc:	69 a9       	ldd	r22, Y+49	; 0x31
    22de:	7a a9       	ldd	r23, Y+50	; 0x32
    22e0:	8b a9       	ldd	r24, Y+51	; 0x33
    22e2:	9c a9       	ldd	r25, Y+52	; 0x34
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6d a9       	ldd	r22, Y+53	; 0x35
    22f6:	7e a9       	ldd	r23, Y+54	; 0x36
    22f8:	8f a9       	ldd	r24, Y+55	; 0x37
    22fa:	98 ad       	ldd	r25, Y+56	; 0x38
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	98 ab       	std	Y+48, r25	; 0x30
    231a:	8f a7       	std	Y+47, r24	; 0x2f
    231c:	0f c0       	rjmp	.+30     	; 0x233c <main+0x18c>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e a7       	std	Y+46, r25	; 0x2e
    2324:	8d a7       	std	Y+45, r24	; 0x2d
    2326:	8d a5       	ldd	r24, Y+45	; 0x2d
    2328:	9e a5       	ldd	r25, Y+46	; 0x2e
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <main+0x17a>
    232e:	9e a7       	std	Y+46, r25	; 0x2e
    2330:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8f a5       	ldd	r24, Y+47	; 0x2f
    2334:	98 a9       	ldd	r25, Y+48	; 0x30
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	98 ab       	std	Y+48, r25	; 0x30
    233a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8f a5       	ldd	r24, Y+47	; 0x2f
    233e:	98 a9       	ldd	r25, Y+48	; 0x30
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <main+0x16e>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	69 a9       	ldd	r22, Y+49	; 0x31
    2348:	7a a9       	ldd	r23, Y+50	; 0x32
    234a:	8b a9       	ldd	r24, Y+51	; 0x33
    234c:	9c a9       	ldd	r25, Y+52	; 0x34
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	98 ab       	std	Y+48, r25	; 0x30
    2358:	8f a7       	std	Y+47, r24	; 0x2f
    235a:	8f a5       	ldd	r24, Y+47	; 0x2f
    235c:	98 a9       	ldd	r25, Y+48	; 0x30
    235e:	9c a7       	std	Y+44, r25	; 0x2c
    2360:	8b a7       	std	Y+43, r24	; 0x2b
    2362:	8b a5       	ldd	r24, Y+43	; 0x2b
    2364:	9c a5       	ldd	r25, Y+44	; 0x2c
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <main+0x1b6>
    236a:	9c a7       	std	Y+44, r25	; 0x2c
    236c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(350);
	CLCD_voidSendCommand(lcd_Clear);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
	//Ask user to Enter ID
	CLCD_voidWriteString("ENTER ID:");
    2374:	88 e6       	ldi	r24, 0x68	; 104
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
	while(1)
	{
		//Busy wating to Keep check if any key pressed first
		do
		{
			Local_u8Key=KPD_voidGet_KPD_Status();
    237c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <KPD_voidGet_KPD_Status>
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5b       	subi	r30, 0xB7	; 183
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 83       	st	Z, r24
			//0xff meaning no key pressed
		}while(Local_u8Key==0xff);
    2388:	fe 01       	movw	r30, r28
    238a:	e7 5b       	subi	r30, 0xB7	; 183
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	8f 3f       	cpi	r24, 0xFF	; 255
    2392:	a1 f3       	breq	.-24     	; 0x237c <main+0x1cc>



		// function to write key numbers Only on keypad
		if(Local_u8Key<10 && Local_u8Key != 50 && Local_u8Key != 24 && IteratorID<4)
    2394:	fe 01       	movw	r30, r28
    2396:	e7 5b       	subi	r30, 0xB7	; 183
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	8a 30       	cpi	r24, 0x0A	; 10
    239e:	98 f5       	brcc	.+102    	; 0x2406 <main+0x256>
    23a0:	fe 01       	movw	r30, r28
    23a2:	e7 5b       	subi	r30, 0xB7	; 183
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	82 33       	cpi	r24, 0x32	; 50
    23aa:	69 f1       	breq	.+90     	; 0x2406 <main+0x256>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 5b       	subi	r30, 0xB7	; 183
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	88 31       	cpi	r24, 0x18	; 24
    23b6:	39 f1       	breq	.+78     	; 0x2406 <main+0x256>
    23b8:	fe 01       	movw	r30, r28
    23ba:	e8 5b       	subi	r30, 0xB8	; 184
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	84 30       	cpi	r24, 0x04	; 4
    23c2:	08 f5       	brcc	.+66     	; 0x2406 <main+0x256>
		{
			CLCD_voidWriteOneNumber(Local_u8Key);
    23c4:	fe 01       	movw	r30, r28
    23c6:	e7 5b       	subi	r30, 0xB7	; 183
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_voidWriteOneNumber>

			//Store numbers pressed on keypad in local Array
			Local_u8ArrID[IteratorID] = Local_u8Key;
    23d0:	fe 01       	movw	r30, r28
    23d2:	e8 5b       	subi	r30, 0xB8	; 184
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	ce 01       	movw	r24, r28
    23de:	86 5b       	subi	r24, 0xB6	; 182
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	dc 01       	movw	r26, r24
    23e4:	a2 0f       	add	r26, r18
    23e6:	b3 1f       	adc	r27, r19
    23e8:	fe 01       	movw	r30, r28
    23ea:	e7 5b       	subi	r30, 0xB7	; 183
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	8c 93       	st	X, r24
			IteratorID++;
    23f2:	de 01       	movw	r26, r28
    23f4:	a8 5b       	subi	r26, 0xB8	; 184
    23f6:	bf 4f       	sbci	r27, 0xFF	; 255
    23f8:	fe 01       	movw	r30, r28
    23fa:	e8 5b       	subi	r30, 0xB8	; 184
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	8c 93       	st	X, r24
    2404:	bb cf       	rjmp	.-138    	; 0x237c <main+0x1cc>
			// Action when User click on button On/C on Keypad
		}else if (Local_u8Key == 50)
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5b       	subi	r30, 0xB7	; 183
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	82 33       	cpi	r24, 0x32	; 50
    2410:	61 f4       	brne	.+24     	; 0x242a <main+0x27a>
		{
			CLCD_voidSendCommand(lcd_Clear);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
			CLCD_voidWriteString("ENTER ID:");
    2418:	88 e6       	ldi	r24, 0x68	; 104
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
			IteratorID=0;
    2420:	fe 01       	movw	r30, r28
    2422:	e8 5b       	subi	r30, 0xB8	; 184
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	10 82       	st	Z, r1
    2428:	a9 cf       	rjmp	.-174    	; 0x237c <main+0x1cc>
			//	Action when User click on button = on Keypad to ask user Enter Password (password always Equal Invert ID)
		}else if (Local_u8Key == 24)
    242a:	fe 01       	movw	r30, r28
    242c:	e7 5b       	subi	r30, 0xB7	; 183
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	88 31       	cpi	r24, 0x18	; 24
    2434:	09 f0       	breq	.+2      	; 0x2438 <main+0x288>
    2436:	a2 cf       	rjmp	.-188    	; 0x237c <main+0x1cc>
		{
			CLCD_voidSendCommand(lcd_Clear);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
			CLCD_voidWriteString("PASS:");
    243e:	82 e7       	ldi	r24, 0x72	; 114
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
			Segment7_VidSetDisplay(NUMBERS[Local_u8Wrong_pass]);
    2446:	89 ad       	ldd	r24, Y+57	; 0x39
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	ce 01       	movw	r24, r28
    244e:	8e 5a       	subi	r24, 0xAE	; 174
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	fc 01       	movw	r30, r24
    2454:	e2 0f       	add	r30, r18
    2456:	f3 1f       	adc	r31, r19
    2458:	80 81       	ld	r24, Z
    245a:	0e 94 8f 10 	call	0x211e	; 0x211e <Segment7_VidSetDisplay>
			//new Busy waiting to wait user to enter Right Password
			while(1)
			{
				do
				{
					Local_u8Key=KPD_voidGet_KPD_Status();
    245e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <KPD_voidGet_KPD_Status>
    2462:	fe 01       	movw	r30, r28
    2464:	e7 5b       	subi	r30, 0xB7	; 183
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 83       	st	Z, r24
				}while(Local_u8Key==0xff);
    246a:	fe 01       	movw	r30, r28
    246c:	e7 5b       	subi	r30, 0xB7	; 183
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	8f 3f       	cpi	r24, 0xFF	; 255
    2474:	a1 f3       	breq	.-24     	; 0x245e <main+0x2ae>

				if(Local_u8Key<10 && Local_u8Key != 50 && Local_u8Key != 24 && IteratorPass<4)
    2476:	fe 01       	movw	r30, r28
    2478:	e7 5b       	subi	r30, 0xB7	; 183
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	8a 30       	cpi	r24, 0x0A	; 10
    2480:	98 f5       	brcc	.+102    	; 0x24e8 <main+0x338>
    2482:	fe 01       	movw	r30, r28
    2484:	e7 5b       	subi	r30, 0xB7	; 183
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	82 33       	cpi	r24, 0x32	; 50
    248c:	69 f1       	breq	.+90     	; 0x24e8 <main+0x338>
    248e:	fe 01       	movw	r30, r28
    2490:	e7 5b       	subi	r30, 0xB7	; 183
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	88 31       	cpi	r24, 0x18	; 24
    2498:	39 f1       	breq	.+78     	; 0x24e8 <main+0x338>
    249a:	fe 01       	movw	r30, r28
    249c:	ea 5b       	subi	r30, 0xBA	; 186
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	08 f5       	brcc	.+66     	; 0x24e8 <main+0x338>
				{
					CLCD_voidWriteOneNumber(Local_u8Key);
    24a6:	fe 01       	movw	r30, r28
    24a8:	e7 5b       	subi	r30, 0xB7	; 183
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_voidWriteOneNumber>

					Local_u8ArrPass[IteratorPass] = Local_u8Key;
    24b2:	fe 01       	movw	r30, r28
    24b4:	ea 5b       	subi	r30, 0xBA	; 186
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	ce 01       	movw	r24, r28
    24c0:	82 5b       	subi	r24, 0xB2	; 178
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	dc 01       	movw	r26, r24
    24c6:	a2 0f       	add	r26, r18
    24c8:	b3 1f       	adc	r27, r19
    24ca:	fe 01       	movw	r30, r28
    24cc:	e7 5b       	subi	r30, 0xB7	; 183
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	8c 93       	st	X, r24
					IteratorPass++;
    24d4:	de 01       	movw	r26, r28
    24d6:	aa 5b       	subi	r26, 0xBA	; 186
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	ea 5b       	subi	r30, 0xBA	; 186
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	8c 93       	st	X, r24
    24e6:	bb cf       	rjmp	.-138    	; 0x245e <main+0x2ae>

				}else if (Local_u8Key == 50)
    24e8:	fe 01       	movw	r30, r28
    24ea:	e7 5b       	subi	r30, 0xB7	; 183
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	82 33       	cpi	r24, 0x32	; 50
    24f2:	61 f4       	brne	.+24     	; 0x250c <main+0x35c>
				{
					CLCD_voidSendCommand(lcd_Clear);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
					CLCD_voidWriteString("PASS:");
    24fa:	82 e7       	ldi	r24, 0x72	; 114
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
					IteratorPass=0;
    2502:	fe 01       	movw	r30, r28
    2504:	ea 5b       	subi	r30, 0xBA	; 186
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	10 82       	st	Z, r1
    250a:	a9 cf       	rjmp	.-174    	; 0x245e <main+0x2ae>
				}else if (Local_u8Key == 24)
    250c:	fe 01       	movw	r30, r28
    250e:	e7 5b       	subi	r30, 0xB7	; 183
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	88 31       	cpi	r24, 0x18	; 24
    2516:	09 f0       	breq	.+2      	; 0x251a <main+0x36a>
    2518:	a2 cf       	rjmp	.-188    	; 0x245e <main+0x2ae>
				{

					CLCD_voidSendCommand(lcd_Clear);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

					if(Local_u8ArrPass[3]==Local_u8ArrID[0] && Local_u8ArrPass[2]==Local_u8ArrID[1] && Local_u8ArrPass[1]==Local_u8ArrID[2] && Local_u8ArrPass[0]==Local_u8ArrID[3])
    2520:	fe 01       	movw	r30, r28
    2522:	e2 5b       	subi	r30, 0xB2	; 178
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	fe 01       	movw	r30, r28
    252a:	e6 5b       	subi	r30, 0xB6	; 182
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	98 17       	cp	r25, r24
    2532:	09 f0       	breq	.+2      	; 0x2536 <main+0x386>
    2534:	db c0       	rjmp	.+438    	; 0x26ec <main+0x53c>
    2536:	fe 01       	movw	r30, r28
    2538:	e2 5b       	subi	r30, 0xB2	; 178
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	92 81       	ldd	r25, Z+2	; 0x02
    253e:	fe 01       	movw	r30, r28
    2540:	e6 5b       	subi	r30, 0xB6	; 182
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	81 81       	ldd	r24, Z+1	; 0x01
    2546:	98 17       	cp	r25, r24
    2548:	09 f0       	breq	.+2      	; 0x254c <main+0x39c>
    254a:	d0 c0       	rjmp	.+416    	; 0x26ec <main+0x53c>
    254c:	fe 01       	movw	r30, r28
    254e:	e2 5b       	subi	r30, 0xB2	; 178
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	fe 01       	movw	r30, r28
    2556:	e6 5b       	subi	r30, 0xB6	; 182
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	98 17       	cp	r25, r24
    255e:	09 f0       	breq	.+2      	; 0x2562 <main+0x3b2>
    2560:	c5 c0       	rjmp	.+394    	; 0x26ec <main+0x53c>
    2562:	fe 01       	movw	r30, r28
    2564:	e2 5b       	subi	r30, 0xB2	; 178
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	90 81       	ld	r25, Z
    256a:	fe 01       	movw	r30, r28
    256c:	e6 5b       	subi	r30, 0xB6	; 182
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	83 81       	ldd	r24, Z+3	; 0x03
    2572:	98 17       	cp	r25, r24
    2574:	09 f0       	breq	.+2      	; 0x2578 <main+0x3c8>
    2576:	ba c0       	rjmp	.+372    	; 0x26ec <main+0x53c>
					{
						Segment7_VidDisableDisplayOne();
    2578:	0e 94 c0 10 	call	0x2180	; 0x2180 <Segment7_VidDisableDisplayOne>
						CLCD_voidWriteString("WELCOME ID:");
    257c:	88 e7       	ldi	r24, 0x78	; 120
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
						for(i=0;i<4;i++)
    2584:	fe 01       	movw	r30, r28
    2586:	e9 5b       	subi	r30, 0xB9	; 185
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	10 82       	st	Z, r1
    258c:	18 c0       	rjmp	.+48     	; 0x25be <main+0x40e>
						{
							CLCD_voidWriteOneNumber(Local_u8ArrID[i]);
    258e:	fe 01       	movw	r30, r28
    2590:	e9 5b       	subi	r30, 0xB9	; 185
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	ce 01       	movw	r24, r28
    259c:	86 5b       	subi	r24, 0xB6	; 182
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	fc 01       	movw	r30, r24
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	80 81       	ld	r24, Z
    25a8:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_voidWriteOneNumber>

					if(Local_u8ArrPass[3]==Local_u8ArrID[0] && Local_u8ArrPass[2]==Local_u8ArrID[1] && Local_u8ArrPass[1]==Local_u8ArrID[2] && Local_u8ArrPass[0]==Local_u8ArrID[3])
					{
						Segment7_VidDisableDisplayOne();
						CLCD_voidWriteString("WELCOME ID:");
						for(i=0;i<4;i++)
    25ac:	de 01       	movw	r26, r28
    25ae:	a9 5b       	subi	r26, 0xB9	; 185
    25b0:	bf 4f       	sbci	r27, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	e9 5b       	subi	r30, 0xB9	; 185
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	8c 93       	st	X, r24
    25be:	fe 01       	movw	r30, r28
    25c0:	e9 5b       	subi	r30, 0xB9	; 185
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	84 30       	cpi	r24, 0x04	; 4
    25c8:	10 f3       	brcs	.-60     	; 0x258e <main+0x3de>
						{
							CLCD_voidWriteOneNumber(Local_u8ArrID[i]);
						}

						CLCD_voidWriteExtraChar(Hamoksha_Char,1,1,8);
    25ca:	80 e1       	ldi	r24, 0x10	; 16
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	28 e0       	ldi	r18, 0x08	; 8
    25d4:	0e 94 07 0b 	call	0x160e	; 0x160e <CLCD_voidWriteExtraChar>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	aa e7       	ldi	r26, 0x7A	; 122
    25de:	b4 e4       	ldi	r27, 0x44	; 68
    25e0:	8f a3       	std	Y+39, r24	; 0x27
    25e2:	98 a7       	std	Y+40, r25	; 0x28
    25e4:	a9 a7       	std	Y+41, r26	; 0x29
    25e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6f a1       	ldd	r22, Y+39	; 0x27
    25ea:	78 a5       	ldd	r23, Y+40	; 0x28
    25ec:	89 a5       	ldd	r24, Y+41	; 0x29
    25ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8b a3       	std	Y+35, r24	; 0x23
    2602:	9c a3       	std	Y+36, r25	; 0x24
    2604:	ad a3       	std	Y+37, r26	; 0x25
    2606:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2608:	6b a1       	ldd	r22, Y+35	; 0x23
    260a:	7c a1       	ldd	r23, Y+36	; 0x24
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <main+0x47a>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9a a3       	std	Y+34, r25	; 0x22
    2626:	89 a3       	std	Y+33, r24	; 0x21
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <main+0x4f8>
	else if (__tmp > 65535)
    262a:	6b a1       	ldd	r22, Y+35	; 0x23
    262c:	7c a1       	ldd	r23, Y+36	; 0x24
    262e:	8d a1       	ldd	r24, Y+37	; 0x25
    2630:	9e a1       	ldd	r25, Y+38	; 0x26
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <main+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6f a1       	ldd	r22, Y+39	; 0x27
    2644:	78 a5       	ldd	r23, Y+40	; 0x28
    2646:	89 a5       	ldd	r24, Y+41	; 0x29
    2648:	9a a5       	ldd	r25, Y+42	; 0x2a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9a a3       	std	Y+34, r25	; 0x22
    2668:	89 a3       	std	Y+33, r24	; 0x21
    266a:	0f c0       	rjmp	.+30     	; 0x268a <main+0x4da>
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	98 a3       	std	Y+32, r25	; 0x20
    2672:	8f 8f       	std	Y+31, r24	; 0x1f
    2674:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2676:	98 a1       	ldd	r25, Y+32	; 0x20
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <main+0x4c8>
    267c:	98 a3       	std	Y+32, r25	; 0x20
    267e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	89 a1       	ldd	r24, Y+33	; 0x21
    2682:	9a a1       	ldd	r25, Y+34	; 0x22
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	89 a1       	ldd	r24, Y+33	; 0x21
    268c:	9a a1       	ldd	r25, Y+34	; 0x22
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <main+0x4bc>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <main+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	6b a1       	ldd	r22, Y+35	; 0x23
    2696:	7c a1       	ldd	r23, Y+36	; 0x24
    2698:	8d a1       	ldd	r24, Y+37	; 0x25
    269a:	9e a1       	ldd	r25, Y+38	; 0x26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9a a3       	std	Y+34, r25	; 0x22
    26a6:	89 a3       	std	Y+33, r24	; 0x21
    26a8:	89 a1       	ldd	r24, Y+33	; 0x21
    26aa:	9a a1       	ldd	r25, Y+34	; 0x22
    26ac:	9e 8f       	std	Y+30, r25	; 0x1e
    26ae:	8d 8f       	std	Y+29, r24	; 0x1d
    26b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <main+0x504>
    26b8:	9e 8f       	std	Y+30, r25	; 0x1e
    26ba:	8d 8f       	std	Y+29, r24	; 0x1d

						_delay_ms(1000);
						CLCD_voidSendCommand(lcd_Clear);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

						ADC_voidInit();
    26c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
						GIE_voidEnable();
    26c6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <GIE_voidEnable>
						while(1)
						{
							ADC_u8StartConversionAsynch(Channel_A0,&App_u16ADCReading,&ADCTempNotification);
    26ca:	28 e5       	ldi	r18, 0x58	; 88
    26cc:	31 e0       	ldi	r19, 0x01	; 1
    26ce:	4f e9       	ldi	r20, 0x9F	; 159
    26d0:	54 e1       	ldi	r21, 0x14	; 20
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	b9 01       	movw	r22, r18
    26d6:	0e 94 51 06 	call	0xca2	; 0xca2 <ADC_u8StartConversionAsynch>
							ADC_u8StartConversionAsynch(Channel_A1,&App_u16ADCReading,&ADCLDRNotification);
    26da:	28 e5       	ldi	r18, 0x58	; 88
    26dc:	31 e0       	ldi	r19, 0x01	; 1
    26de:	41 e1       	ldi	r20, 0x11	; 17
    26e0:	55 e1       	ldi	r21, 0x15	; 21
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 51 06 	call	0xca2	; 0xca2 <ADC_u8StartConversionAsynch>
    26ea:	ef cf       	rjmp	.-34     	; 0x26ca <main+0x51a>
						}

					}else
					{
						Local_u8Wrong_pass--;
    26ec:	89 ad       	ldd	r24, Y+57	; 0x39
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	89 af       	std	Y+57, r24	; 0x39
						if(Local_u8Wrong_pass == 0)
    26f2:	89 ad       	ldd	r24, Y+57	; 0x39
    26f4:	88 23       	and	r24, r24
    26f6:	09 f0       	breq	.+2      	; 0x26fa <main+0x54a>
    26f8:	91 c0       	rjmp	.+290    	; 0x281c <main+0x66c>
						{
							Segment7_VidSetDisplay(NUMBERS[Local_u8Wrong_pass]);
    26fa:	89 ad       	ldd	r24, Y+57	; 0x39
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	ce 01       	movw	r24, r28
    2702:	8e 5a       	subi	r24, 0xAE	; 174
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	fc 01       	movw	r30, r24
    2708:	e2 0f       	add	r30, r18
    270a:	f3 1f       	adc	r31, r19
    270c:	80 81       	ld	r24, Z
    270e:	0e 94 8f 10 	call	0x211e	; 0x211e <Segment7_VidSetDisplay>
							CLCD_voidWriteString("Bye Hamoksha");
    2712:	84 e8       	ldi	r24, 0x84	; 132
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	aa e7       	ldi	r26, 0x7A	; 122
    2720:	b4 e4       	ldi	r27, 0x44	; 68
    2722:	89 8f       	std	Y+25, r24	; 0x19
    2724:	9a 8f       	std	Y+26, r25	; 0x1a
    2726:	ab 8f       	std	Y+27, r26	; 0x1b
    2728:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	69 8d       	ldd	r22, Y+25	; 0x19
    272c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8d 8b       	std	Y+21, r24	; 0x15
    2744:	9e 8b       	std	Y+22, r25	; 0x16
    2746:	af 8b       	std	Y+23, r26	; 0x17
    2748:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <main+0x5bc>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <main+0x63a>
	else if (__tmp > 65535)
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <main+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	69 8d       	ldd	r22, Y+25	; 0x19
    2786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <main+0x61c>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <main+0x60a>
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <main+0x5fe>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <main+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6d 89       	ldd	r22, Y+21	; 0x15
    27d8:	7e 89       	ldd	r23, Y+22	; 0x16
    27da:	8f 89       	ldd	r24, Y+23	; 0x17
    27dc:	98 8d       	ldd	r25, Y+24	; 0x18
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9c 8b       	std	Y+20, r25	; 0x14
    27e8:	8b 8b       	std	Y+19, r24	; 0x13
    27ea:	8b 89       	ldd	r24, Y+19	; 0x13
    27ec:	9c 89       	ldd	r25, Y+20	; 0x14
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f4:	98 89       	ldd	r25, Y+16	; 0x10
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <main+0x646>
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
		}else if(Local_u8Key>10 && Local_u8Key != 50 && Local_u8Key != 24)
		{

		}
	}
	CLCD_voidSendCommand(lcd_DisplayOff);
    27fe:	88 e0       	ldi	r24, 0x08	; 8
    2800:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
	Segment7_VidDisableDisplayOne();
    2804:	0e 94 c0 10 	call	0x2180	; 0x2180 <Segment7_VidDisableDisplayOne>
}
    2808:	c0 5a       	subi	r28, 0xA0	; 160
    280a:	df 4f       	sbci	r29, 0xFF	; 255
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret
							CLCD_voidWriteString("Bye Hamoksha");
							_delay_ms(1000);
							break;
						}

						Segment7_VidSetDisplay(NUMBERS[Local_u8Wrong_pass]);
    281c:	89 ad       	ldd	r24, Y+57	; 0x39
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	ce 01       	movw	r24, r28
    2824:	8e 5a       	subi	r24, 0xAE	; 174
    2826:	9f 4f       	sbci	r25, 0xFF	; 255
    2828:	fc 01       	movw	r30, r24
    282a:	e2 0f       	add	r30, r18
    282c:	f3 1f       	adc	r31, r19
    282e:	80 81       	ld	r24, Z
    2830:	0e 94 8f 10 	call	0x211e	; 0x211e <Segment7_VidSetDisplay>
						IteratorPass=0;
    2834:	fe 01       	movw	r30, r28
    2836:	ea 5b       	subi	r30, 0xBA	; 186
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	10 82       	st	Z, r1
						CLCD_voidSendCommand(lcd_Clear);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
						CLCD_voidWriteString("Try Again");
    2842:	81 e9       	ldi	r24, 0x91	; 145
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	aa e7       	ldi	r26, 0x7A	; 122
    2850:	b4 e4       	ldi	r27, 0x44	; 68
    2852:	8b 87       	std	Y+11, r24	; 0x0b
    2854:	9c 87       	std	Y+12, r25	; 0x0c
    2856:	ad 87       	std	Y+13, r26	; 0x0d
    2858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6b 85       	ldd	r22, Y+11	; 0x0b
    285c:	7c 85       	ldd	r23, Y+12	; 0x0c
    285e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2860:	9e 85       	ldd	r25, Y+14	; 0x0e
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8f 83       	std	Y+7, r24	; 0x07
    2874:	98 87       	std	Y+8, r25	; 0x08
    2876:	a9 87       	std	Y+9, r26	; 0x09
    2878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <main+0x6ec>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	3f c0       	rjmp	.+126    	; 0x291a <main+0x76a>
	else if (__tmp > 65535)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <main+0x74c>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <main+0x73a>
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <main+0x72e>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <main+0x776>
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						CLCD_voidSendCommand(lcd_Clear);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>
						CLCD_voidWriteString("PASS:");
    2934:	82 e7       	ldi	r24, 0x72	; 114
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
    293c:	90 cd       	rjmp	.-1248   	; 0x245e <main+0x2ae>

0000293e <ADCTempNotification>:
	CLCD_voidSendCommand(lcd_DisplayOff);
	Segment7_VidDisableDisplayOne();
}

void ADCTempNotification (void)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <ADCTempNotification+0x6>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	//ADC signal Input
	DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_0,DIO_u8_Input);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_0,DIO_u8_Low);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

	u16 MilliVolt;
	u8 Temp;

	MilliVolt = (u16) ((App_u16ADCReading*5000UL)/1024UL);
    295e:	80 91 58 01 	lds	r24, 0x0158
    2962:	90 91 59 01 	lds	r25, 0x0159
    2966:	cc 01       	movw	r24, r24
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	28 e8       	ldi	r18, 0x88	; 136
    296e:	33 e1       	ldi	r19, 0x13	; 19
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__mulsi3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	07 2e       	mov	r0, r23
    2982:	7a e0       	ldi	r23, 0x0A	; 10
    2984:	b6 95       	lsr	r27
    2986:	a7 95       	ror	r26
    2988:	97 95       	ror	r25
    298a:	87 95       	ror	r24
    298c:	7a 95       	dec	r23
    298e:	d1 f7       	brne	.-12     	; 0x2984 <ADCTempNotification+0x46>
    2990:	70 2d       	mov	r23, r0
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02
	Temp = MilliVolt/10;
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	2a e0       	ldi	r18, 0x0A	; 10
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	b9 01       	movw	r22, r18
    29a0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <__udivmodhi4>
    29a4:	cb 01       	movw	r24, r22
    29a6:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidWriteString("Temp: ");
    29a8:	8b e9       	ldi	r24, 0x9B	; 155
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
	CLCD_voidWriteNumber(Temp);
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e0       	ldi	r26, 0x00	; 0
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 86 0b 	call	0x170c	; 0x170c <CLCD_voidWriteNumber>
	CLCD_voidWriteString(" c");
    29c2:	82 ea       	ldi	r24, 0xA2	; 162
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
	CLCD_voidSendCommand(lcd_Home);
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	if(Temp > 30)
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	8f 31       	cpi	r24, 0x1F	; 31
    29d4:	98 f0       	brcs	.+38     	; 0x29fc <ADCTempNotification+0xbe>
	{
		DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_2,DIO_u8_Output);
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	62 e0       	ldi	r22, 0x02	; 2
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
		DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_2,DIO_u8_High);
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	62 e0       	ldi	r22, 0x02	; 2
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
		CLCD_Gotoxy(0,15);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	6f e0       	ldi	r22, 0x0F	; 15
    29ee:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>
		CLCD_voidWriteString("M");
    29f2:	85 ea       	ldi	r24, 0xA5	; 165
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
    29fa:	0d c0       	rjmp	.+26     	; 0x2a16 <ADCTempNotification+0xd8>

	}else
	{
		DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_2,DIO_u8_Low);
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	62 e0       	ldi	r22, 0x02	; 2
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>
		CLCD_Gotoxy(0,15);
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	6f e0       	ldi	r22, 0x0F	; 15
    2a0a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>
		CLCD_voidWriteString(" ");
    2a0e:	87 ea       	ldi	r24, 0xA7	; 167
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>
	}
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <ADCLDRNotification>:

void ADCLDRNotification (void)
{
    2a22:	af 92       	push	r10
    2a24:	bf 92       	push	r11
    2a26:	cf 92       	push	r12
    2a28:	df 92       	push	r13
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	0f 93       	push	r16
    2a30:	1f 93       	push	r17
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <ADCLDRNotification+0x16>
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <ADCLDRNotification+0x18>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <ADCLDRNotification+0x1a>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	//ADC signal Input
	DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_1,DIO_u8_Input);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_1,DIO_u8_Low);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

	//ADC signal Output Light Leds
	DIO_u8_SetPort_Dir(Group_B,DIO_u8_PORT_Output);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	6f ef       	ldi	r22, 0xFF	; 255
    2a58:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <DIO_u8_SetPort_Dir>

	//Connect Ground to Leds
	DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_4,DIO_u8_Output);
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	64 e0       	ldi	r22, 0x04	; 4
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_4,DIO_u8_High);
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	64 e0       	ldi	r22, 0x04	; 4
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

	DIO_u8_SetPin_Dir(Group_D,DIO_u8_Pin_5,DIO_u8_Output);
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	65 e0       	ldi	r22, 0x05	; 5
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_5,DIO_u8_High);
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	65 e0       	ldi	r22, 0x05	; 5
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_u8_SetPin_value>

	u16 MilliVolt;
	u16 Reading;

	MilliVolt = (u16) ((App_u16ADCReading*5000UL)/1024UL);
    2a84:	80 91 58 01 	lds	r24, 0x0158
    2a88:	90 91 59 01 	lds	r25, 0x0159
    2a8c:	cc 01       	movw	r24, r24
    2a8e:	a0 e0       	ldi	r26, 0x00	; 0
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	28 e8       	ldi	r18, 0x88	; 136
    2a94:	33 e1       	ldi	r19, 0x13	; 19
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__mulsi3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	07 2e       	mov	r0, r23
    2aa8:	7a e0       	ldi	r23, 0x0A	; 10
    2aaa:	b6 95       	lsr	r27
    2aac:	a7 95       	ror	r26
    2aae:	97 95       	ror	r25
    2ab0:	87 95       	ror	r24
    2ab2:	7a 95       	dec	r23
    2ab4:	d1 f7       	brne	.-12     	; 0x2aaa <ADCLDRNotification+0x88>
    2ab6:	70 2d       	mov	r23, r0
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
	CLCD_Gotoxy(1,0);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <CLCD_Gotoxy>
	ADC_u8StartConversionSynch(Channel_A1, &MilliVolt);
    2ac4:	9e 01       	movw	r18, r28
    2ac6:	2d 5f       	subi	r18, 0xFD	; 253
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 d3 05 	call	0xba6	; 0xba6 <ADC_u8StartConversionSynch>
	Reading = mapping(0, 1024, 0, 9, MilliVolt);
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	cc 01       	movw	r24, r24
    2ad8:	a0 e0       	ldi	r26, 0x00	; 0
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <ADCLDRNotification+0xbc>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <ADCLDRNotification+0xbe>
    2ae0:	ed b7       	in	r30, 0x3d	; 61
    2ae2:	fe b7       	in	r31, 0x3e	; 62
    2ae4:	31 96       	adiw	r30, 0x01	; 1
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	34 e0       	ldi	r19, 0x04	; 4
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	ee 24       	eor	r14, r14
    2b00:	ff 24       	eor	r15, r15
    2b02:	87 01       	movw	r16, r14
    2b04:	0f 2e       	mov	r0, r31
    2b06:	f9 e0       	ldi	r31, 0x09	; 9
    2b08:	af 2e       	mov	r10, r31
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	bf 2e       	mov	r11, r31
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	cf 2e       	mov	r12, r31
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	df 2e       	mov	r13, r31
    2b16:	f0 2d       	mov	r31, r0
    2b18:	0e 94 aa 07 	call	0xf54	; 0xf54 <mapping>
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9a 83       	std	Y+2, r25	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidWriteNumber(Reading);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	cc 01       	movw	r24, r24
    2b32:	a0 e0       	ldi	r26, 0x00	; 0
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 86 0b 	call	0x170c	; 0x170c <CLCD_voidWriteNumber>
	CLCD_voidWriteString(" LEVEL");
    2b3e:	89 ea       	ldi	r24, 0xA9	; 169
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidWriteString>

	CLCD_voidSendCommand(lcd_Home);
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	0e 94 39 09 	call	0x1272	; 0x1272 <CLCD_voidSendCommand>

	switch(Reading)
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	c9 f1       	breq	.+114    	; 0x2bd0 <ADCLDRNotification+0x1ae>
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	85 30       	cpi	r24, 0x05	; 5
    2b64:	91 05       	cpc	r25, r1
    2b66:	80 f4       	brcc	.+32     	; 0x2b88 <ADCLDRNotification+0x166>
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	82 30       	cpi	r24, 0x02	; 2
    2b6e:	91 05       	cpc	r25, r1
    2b70:	29 f1       	breq	.+74     	; 0x2bbc <ADCLDRNotification+0x19a>
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	28 f5       	brcc	.+74     	; 0x2bc6 <ADCLDRNotification+0x1a4>
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	91 05       	cpc	r25, r1
    2b84:	b1 f0       	breq	.+44     	; 0x2bb2 <ADCLDRNotification+0x190>
    2b86:	3d c0       	rjmp	.+122    	; 0x2c02 <ADCLDRNotification+0x1e0>
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	86 30       	cpi	r24, 0x06	; 6
    2b8e:	91 05       	cpc	r25, r1
    2b90:	49 f1       	breq	.+82     	; 0x2be4 <ADCLDRNotification+0x1c2>
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	86 30       	cpi	r24, 0x06	; 6
    2b98:	91 05       	cpc	r25, r1
    2b9a:	f8 f0       	brcs	.+62     	; 0x2bda <ADCLDRNotification+0x1b8>
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	87 30       	cpi	r24, 0x07	; 7
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	21 f1       	breq	.+72     	; 0x2bee <ADCLDRNotification+0x1cc>
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	88 30       	cpi	r24, 0x08	; 8
    2bac:	91 05       	cpc	r25, r1
    2bae:	21 f1       	breq	.+72     	; 0x2bf8 <ADCLDRNotification+0x1d6>
    2bb0:	28 c0       	rjmp	.+80     	; 0x2c02 <ADCLDRNotification+0x1e0>
	{
	case 1:
		DIO_u8_SetPort_value(Group_B,0b00000001);
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bba:	27 c0       	rjmp	.+78     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 2:
		DIO_u8_SetPort_value(Group_B,0b00000011);
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	63 e0       	ldi	r22, 0x03	; 3
    2bc0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bc4:	22 c0       	rjmp	.+68     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 3:
		DIO_u8_SetPort_value(Group_B,0b00000111);
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	67 e0       	ldi	r22, 0x07	; 7
    2bca:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bce:	1d c0       	rjmp	.+58     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 4:
		DIO_u8_SetPort_value(Group_B,0b00001111);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	6f e0       	ldi	r22, 0x0F	; 15
    2bd4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bd8:	18 c0       	rjmp	.+48     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 5:
		DIO_u8_SetPort_value(Group_B,0b00011111);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	6f e1       	ldi	r22, 0x1F	; 31
    2bde:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2be2:	13 c0       	rjmp	.+38     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 6:
		DIO_u8_SetPort_value(Group_B,0b00111111);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	6f e3       	ldi	r22, 0x3F	; 63
    2be8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bec:	0e c0       	rjmp	.+28     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 7:
		DIO_u8_SetPort_value(Group_B,0b01111111);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	6f e7       	ldi	r22, 0x7F	; 127
    2bf2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	case 8:
		DIO_u8_SetPort_value(Group_B,0b11111111);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	6f ef       	ldi	r22, 0xFF	; 255
    2bfc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
    2c00:	04 c0       	rjmp	.+8      	; 0x2c0a <ADCLDRNotification+0x1e8>
		break;
	default:
		DIO_u8_SetPort_value(Group_B,0b00000000);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8_SetPort_value>
		break;
	}
}
    2c0a:	26 96       	adiw	r28, 0x06	; 6
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	bf 90       	pop	r11
    2c28:	af 90       	pop	r10
    2c2a:	08 95       	ret

00002c2c <__mulsi3>:
    2c2c:	62 9f       	mul	r22, r18
    2c2e:	d0 01       	movw	r26, r0
    2c30:	73 9f       	mul	r23, r19
    2c32:	f0 01       	movw	r30, r0
    2c34:	82 9f       	mul	r24, r18
    2c36:	e0 0d       	add	r30, r0
    2c38:	f1 1d       	adc	r31, r1
    2c3a:	64 9f       	mul	r22, r20
    2c3c:	e0 0d       	add	r30, r0
    2c3e:	f1 1d       	adc	r31, r1
    2c40:	92 9f       	mul	r25, r18
    2c42:	f0 0d       	add	r31, r0
    2c44:	83 9f       	mul	r24, r19
    2c46:	f0 0d       	add	r31, r0
    2c48:	74 9f       	mul	r23, r20
    2c4a:	f0 0d       	add	r31, r0
    2c4c:	65 9f       	mul	r22, r21
    2c4e:	f0 0d       	add	r31, r0
    2c50:	99 27       	eor	r25, r25
    2c52:	72 9f       	mul	r23, r18
    2c54:	b0 0d       	add	r27, r0
    2c56:	e1 1d       	adc	r30, r1
    2c58:	f9 1f       	adc	r31, r25
    2c5a:	63 9f       	mul	r22, r19
    2c5c:	b0 0d       	add	r27, r0
    2c5e:	e1 1d       	adc	r30, r1
    2c60:	f9 1f       	adc	r31, r25
    2c62:	bd 01       	movw	r22, r26
    2c64:	cf 01       	movw	r24, r30
    2c66:	11 24       	eor	r1, r1
    2c68:	08 95       	ret

00002c6a <__udivmodqi4>:
    2c6a:	99 1b       	sub	r25, r25
    2c6c:	79 e0       	ldi	r23, 0x09	; 9
    2c6e:	04 c0       	rjmp	.+8      	; 0x2c78 <__udivmodqi4_ep>

00002c70 <__udivmodqi4_loop>:
    2c70:	99 1f       	adc	r25, r25
    2c72:	96 17       	cp	r25, r22
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <__udivmodqi4_ep>
    2c76:	96 1b       	sub	r25, r22

00002c78 <__udivmodqi4_ep>:
    2c78:	88 1f       	adc	r24, r24
    2c7a:	7a 95       	dec	r23
    2c7c:	c9 f7       	brne	.-14     	; 0x2c70 <__udivmodqi4_loop>
    2c7e:	80 95       	com	r24
    2c80:	08 95       	ret

00002c82 <__udivmodhi4>:
    2c82:	aa 1b       	sub	r26, r26
    2c84:	bb 1b       	sub	r27, r27
    2c86:	51 e1       	ldi	r21, 0x11	; 17
    2c88:	07 c0       	rjmp	.+14     	; 0x2c98 <__udivmodhi4_ep>

00002c8a <__udivmodhi4_loop>:
    2c8a:	aa 1f       	adc	r26, r26
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	a6 17       	cp	r26, r22
    2c90:	b7 07       	cpc	r27, r23
    2c92:	10 f0       	brcs	.+4      	; 0x2c98 <__udivmodhi4_ep>
    2c94:	a6 1b       	sub	r26, r22
    2c96:	b7 0b       	sbc	r27, r23

00002c98 <__udivmodhi4_ep>:
    2c98:	88 1f       	adc	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	5a 95       	dec	r21
    2c9e:	a9 f7       	brne	.-22     	; 0x2c8a <__udivmodhi4_loop>
    2ca0:	80 95       	com	r24
    2ca2:	90 95       	com	r25
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	08 95       	ret

00002caa <__udivmodsi4>:
    2caa:	a1 e2       	ldi	r26, 0x21	; 33
    2cac:	1a 2e       	mov	r1, r26
    2cae:	aa 1b       	sub	r26, r26
    2cb0:	bb 1b       	sub	r27, r27
    2cb2:	fd 01       	movw	r30, r26
    2cb4:	0d c0       	rjmp	.+26     	; 0x2cd0 <__udivmodsi4_ep>

00002cb6 <__udivmodsi4_loop>:
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	ee 1f       	adc	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	a2 17       	cp	r26, r18
    2cc0:	b3 07       	cpc	r27, r19
    2cc2:	e4 07       	cpc	r30, r20
    2cc4:	f5 07       	cpc	r31, r21
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <__udivmodsi4_ep>
    2cc8:	a2 1b       	sub	r26, r18
    2cca:	b3 0b       	sbc	r27, r19
    2ccc:	e4 0b       	sbc	r30, r20
    2cce:	f5 0b       	sbc	r31, r21

00002cd0 <__udivmodsi4_ep>:
    2cd0:	66 1f       	adc	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	1a 94       	dec	r1
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <__udivmodsi4_loop>
    2cdc:	60 95       	com	r22
    2cde:	70 95       	com	r23
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	bd 01       	movw	r22, r26
    2cea:	cf 01       	movw	r24, r30
    2cec:	08 95       	ret

00002cee <__divmodsi4>:
    2cee:	97 fb       	bst	r25, 7
    2cf0:	09 2e       	mov	r0, r25
    2cf2:	05 26       	eor	r0, r21
    2cf4:	0e d0       	rcall	.+28     	; 0x2d12 <__divmodsi4_neg1>
    2cf6:	57 fd       	sbrc	r21, 7
    2cf8:	04 d0       	rcall	.+8      	; 0x2d02 <__divmodsi4_neg2>
    2cfa:	d7 df       	rcall	.-82     	; 0x2caa <__udivmodsi4>
    2cfc:	0a d0       	rcall	.+20     	; 0x2d12 <__divmodsi4_neg1>
    2cfe:	00 1c       	adc	r0, r0
    2d00:	38 f4       	brcc	.+14     	; 0x2d10 <__divmodsi4_exit>

00002d02 <__divmodsi4_neg2>:
    2d02:	50 95       	com	r21
    2d04:	40 95       	com	r20
    2d06:	30 95       	com	r19
    2d08:	21 95       	neg	r18
    2d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d0e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d10 <__divmodsi4_exit>:
    2d10:	08 95       	ret

00002d12 <__divmodsi4_neg1>:
    2d12:	f6 f7       	brtc	.-4      	; 0x2d10 <__divmodsi4_exit>
    2d14:	90 95       	com	r25
    2d16:	80 95       	com	r24
    2d18:	70 95       	com	r23
    2d1a:	61 95       	neg	r22
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d20:	9f 4f       	sbci	r25, 0xFF	; 255
    2d22:	08 95       	ret

00002d24 <__prologue_saves__>:
    2d24:	2f 92       	push	r2
    2d26:	3f 92       	push	r3
    2d28:	4f 92       	push	r4
    2d2a:	5f 92       	push	r5
    2d2c:	6f 92       	push	r6
    2d2e:	7f 92       	push	r7
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	ca 1b       	sub	r28, r26
    2d4e:	db 0b       	sbc	r29, r27
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	09 94       	ijmp

00002d5c <__epilogue_restores__>:
    2d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5e:	39 88       	ldd	r3, Y+17	; 0x11
    2d60:	48 88       	ldd	r4, Y+16	; 0x10
    2d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d70:	c8 84       	ldd	r12, Y+8	; 0x08
    2d72:	df 80       	ldd	r13, Y+7	; 0x07
    2d74:	ee 80       	ldd	r14, Y+6	; 0x06
    2d76:	fd 80       	ldd	r15, Y+5	; 0x05
    2d78:	0c 81       	ldd	r16, Y+4	; 0x04
    2d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d80:	ce 0f       	add	r28, r30
    2d82:	d1 1d       	adc	r29, r1
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	ed 01       	movw	r28, r26
    2d90:	08 95       	ret

00002d92 <_exit>:
    2d92:	f8 94       	cli

00002d94 <__stop_program>:
    2d94:	ff cf       	rjmp	.-2      	; 0x2d94 <__stop_program>
